// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "user": Application User Types
//
// Command:
// $ goagen
// --design=gigglesearch.org/giggle-auth/auth/design
// --out=$(GOPATH)/src/gigglesearch.org/giggle-auth/auth
// --version=v1.3.1

package client

import (
	"github.com/goadesign/goa"
	uuid "github.com/goadesign/goa/uuid"
	"time"
	"unicode/utf8"
)

// amazonRegisterParams user type.
type amazonRegisterParams struct {
	// The email that will be connected to the account
	Email *string `form:"email,omitempty" json:"email,omitempty" yaml:"email,omitempty" xml:"email,omitempty"`
	// The given name for the user
	FirstName *string `form:"firstName,omitempty" json:"firstName,omitempty" yaml:"firstName,omitempty" xml:"firstName,omitempty"`
	// The recaptcha response code
	GRecaptchaResponse *string `form:"gRecaptchaResponse,omitempty" json:"gRecaptchaResponse,omitempty" yaml:"gRecaptchaResponse,omitempty" xml:"gRecaptchaResponse,omitempty"`
	// The family name for the user
	LastName *string `form:"lastName,omitempty" json:"lastName,omitempty" yaml:"lastName,omitempty" xml:"lastName,omitempty"`
	// The key given when the register was approved
	OauthKey *uuid.UUID `form:"oauthKey,omitempty" json:"oauthKey,omitempty" yaml:"oauthKey,omitempty" xml:"oauthKey,omitempty"`
}

// Validate validates the amazonRegisterParams type instance.
func (ut *amazonRegisterParams) Validate() (err error) {
	if ut.Email == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "email"))
	}
	if ut.FirstName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "firstName"))
	}
	if ut.LastName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "lastName"))
	}
	if ut.OauthKey == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "oauthKey"))
	}
	if ut.GRecaptchaResponse == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "gRecaptchaResponse"))
	}
	if ut.Email != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *ut.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`request.email`, *ut.Email, goa.FormatEmail, err2))
		}
	}
	if ut.FirstName != nil {
		if utf8.RuneCountInString(*ut.FirstName) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.firstName`, *ut.FirstName, utf8.RuneCountInString(*ut.FirstName), 2, true))
		}
	}
	if ut.FirstName != nil {
		if utf8.RuneCountInString(*ut.FirstName) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.firstName`, *ut.FirstName, utf8.RuneCountInString(*ut.FirstName), 50, false))
		}
	}
	if ut.LastName != nil {
		if utf8.RuneCountInString(*ut.LastName) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.lastName`, *ut.LastName, utf8.RuneCountInString(*ut.LastName), 2, true))
		}
	}
	if ut.LastName != nil {
		if utf8.RuneCountInString(*ut.LastName) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.lastName`, *ut.LastName, utf8.RuneCountInString(*ut.LastName), 50, false))
		}
	}
	return
}

// Publicize creates AmazonRegisterParams from amazonRegisterParams
func (ut *amazonRegisterParams) Publicize() *AmazonRegisterParams {
	var pub AmazonRegisterParams
	if ut.Email != nil {
		pub.Email = *ut.Email
	}
	if ut.FirstName != nil {
		pub.FirstName = *ut.FirstName
	}
	if ut.GRecaptchaResponse != nil {
		pub.GRecaptchaResponse = *ut.GRecaptchaResponse
	}
	if ut.LastName != nil {
		pub.LastName = *ut.LastName
	}
	if ut.OauthKey != nil {
		pub.OauthKey = *ut.OauthKey
	}
	return &pub
}

// AmazonRegisterParams user type.
type AmazonRegisterParams struct {
	// The email that will be connected to the account
	Email string `form:"email" json:"email" yaml:"email" xml:"email"`
	// The given name for the user
	FirstName string `form:"firstName" json:"firstName" yaml:"firstName" xml:"firstName"`
	// The recaptcha response code
	GRecaptchaResponse string `form:"gRecaptchaResponse" json:"gRecaptchaResponse" yaml:"gRecaptchaResponse" xml:"gRecaptchaResponse"`
	// The family name for the user
	LastName string `form:"lastName" json:"lastName" yaml:"lastName" xml:"lastName"`
	// The key given when the register was approved
	OauthKey uuid.UUID `form:"oauthKey" json:"oauthKey" yaml:"oauthKey" xml:"oauthKey"`
}

// Validate validates the AmazonRegisterParams type instance.
func (ut *AmazonRegisterParams) Validate() (err error) {
	if ut.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "email"))
	}
	if ut.FirstName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "firstName"))
	}
	if ut.LastName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "lastName"))
	}

	if ut.GRecaptchaResponse == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "gRecaptchaResponse"))
	}
	if err2 := goa.ValidateFormat(goa.FormatEmail, ut.Email); err2 != nil {
		err = goa.MergeErrors(err, goa.InvalidFormatError(`type.email`, ut.Email, goa.FormatEmail, err2))
	}
	if utf8.RuneCountInString(ut.FirstName) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.firstName`, ut.FirstName, utf8.RuneCountInString(ut.FirstName), 2, true))
	}
	if utf8.RuneCountInString(ut.FirstName) > 50 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.firstName`, ut.FirstName, utf8.RuneCountInString(ut.FirstName), 50, false))
	}
	if utf8.RuneCountInString(ut.LastName) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.lastName`, ut.LastName, utf8.RuneCountInString(ut.LastName), 2, true))
	}
	if utf8.RuneCountInString(ut.LastName) > 50 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.lastName`, ut.LastName, utf8.RuneCountInString(ut.LastName), 50, false))
	}
	return
}

// bookmarkParams user type.
type bookmarkParams struct {
	Category    *string `form:"category,omitempty" json:"category,omitempty" yaml:"category,omitempty" xml:"category,omitempty"`
	Description *string `form:"description,omitempty" json:"description,omitempty" yaml:"description,omitempty" xml:"description,omitempty"`
	ID          *string `form:"id,omitempty" json:"id,omitempty" yaml:"id,omitempty" xml:"id,omitempty"`
	Title       *string `form:"title,omitempty" json:"title,omitempty" yaml:"title,omitempty" xml:"title,omitempty"`
	Type        *string `form:"type,omitempty" json:"type,omitempty" yaml:"type,omitempty" xml:"type,omitempty"`
}

// Publicize creates BookmarkParams from bookmarkParams
func (ut *bookmarkParams) Publicize() *BookmarkParams {
	var pub BookmarkParams
	if ut.Category != nil {
		pub.Category = ut.Category
	}
	if ut.Description != nil {
		pub.Description = ut.Description
	}
	if ut.ID != nil {
		pub.ID = ut.ID
	}
	if ut.Title != nil {
		pub.Title = ut.Title
	}
	if ut.Type != nil {
		pub.Type = ut.Type
	}
	return &pub
}

// BookmarkParams user type.
type BookmarkParams struct {
	Category    *string `form:"category,omitempty" json:"category,omitempty" yaml:"category,omitempty" xml:"category,omitempty"`
	Description *string `form:"description,omitempty" json:"description,omitempty" yaml:"description,omitempty" xml:"description,omitempty"`
	ID          *string `form:"id,omitempty" json:"id,omitempty" yaml:"id,omitempty" xml:"id,omitempty"`
	Title       *string `form:"title,omitempty" json:"title,omitempty" yaml:"title,omitempty" xml:"title,omitempty"`
	Type        *string `form:"type,omitempty" json:"type,omitempty" yaml:"type,omitempty" xml:"type,omitempty"`
}

// changePasswordParams user type.
type changePasswordParams struct {
	// The new password for the current user account
	NewPassword *string `form:"newPassword,omitempty" json:"newPassword,omitempty" yaml:"newPassword,omitempty" xml:"newPassword,omitempty"`
	// The old password for the current user account
	OldPassword *string `form:"oldPassword,omitempty" json:"oldPassword,omitempty" yaml:"oldPassword,omitempty" xml:"oldPassword,omitempty"`
}

// Validate validates the changePasswordParams type instance.
func (ut *changePasswordParams) Validate() (err error) {
	if ut.OldPassword == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "oldPassword"))
	}
	if ut.NewPassword == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "newPassword"))
	}
	if ut.NewPassword != nil {
		if ok := goa.ValidatePattern(`^.*[\w].*$`, *ut.NewPassword); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`request.newPassword`, *ut.NewPassword, `^.*[\w].*$`))
		}
	}
	if ut.NewPassword != nil {
		if utf8.RuneCountInString(*ut.NewPassword) < 6 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.newPassword`, *ut.NewPassword, utf8.RuneCountInString(*ut.NewPassword), 6, true))
		}
	}
	if ut.NewPassword != nil {
		if utf8.RuneCountInString(*ut.NewPassword) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.newPassword`, *ut.NewPassword, utf8.RuneCountInString(*ut.NewPassword), 100, false))
		}
	}
	if ut.OldPassword != nil {
		if ok := goa.ValidatePattern(`^.*[\w].*$`, *ut.OldPassword); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`request.oldPassword`, *ut.OldPassword, `^.*[\w].*$`))
		}
	}
	if ut.OldPassword != nil {
		if utf8.RuneCountInString(*ut.OldPassword) < 6 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.oldPassword`, *ut.OldPassword, utf8.RuneCountInString(*ut.OldPassword), 6, true))
		}
	}
	if ut.OldPassword != nil {
		if utf8.RuneCountInString(*ut.OldPassword) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.oldPassword`, *ut.OldPassword, utf8.RuneCountInString(*ut.OldPassword), 100, false))
		}
	}
	return
}

// Publicize creates ChangePasswordParams from changePasswordParams
func (ut *changePasswordParams) Publicize() *ChangePasswordParams {
	var pub ChangePasswordParams
	if ut.NewPassword != nil {
		pub.NewPassword = *ut.NewPassword
	}
	if ut.OldPassword != nil {
		pub.OldPassword = *ut.OldPassword
	}
	return &pub
}

// ChangePasswordParams user type.
type ChangePasswordParams struct {
	// The new password for the current user account
	NewPassword string `form:"newPassword" json:"newPassword" yaml:"newPassword" xml:"newPassword"`
	// The old password for the current user account
	OldPassword string `form:"oldPassword" json:"oldPassword" yaml:"oldPassword" xml:"oldPassword"`
}

// Validate validates the ChangePasswordParams type instance.
func (ut *ChangePasswordParams) Validate() (err error) {
	if ut.OldPassword == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "oldPassword"))
	}
	if ut.NewPassword == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "newPassword"))
	}
	if ok := goa.ValidatePattern(`^.*[\w].*$`, ut.NewPassword); !ok {
		err = goa.MergeErrors(err, goa.InvalidPatternError(`type.newPassword`, ut.NewPassword, `^.*[\w].*$`))
	}
	if utf8.RuneCountInString(ut.NewPassword) < 6 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.newPassword`, ut.NewPassword, utf8.RuneCountInString(ut.NewPassword), 6, true))
	}
	if utf8.RuneCountInString(ut.NewPassword) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.newPassword`, ut.NewPassword, utf8.RuneCountInString(ut.NewPassword), 100, false))
	}
	if ok := goa.ValidatePattern(`^.*[\w].*$`, ut.OldPassword); !ok {
		err = goa.MergeErrors(err, goa.InvalidPatternError(`type.oldPassword`, ut.OldPassword, `^.*[\w].*$`))
	}
	if utf8.RuneCountInString(ut.OldPassword) < 6 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.oldPassword`, ut.OldPassword, utf8.RuneCountInString(ut.OldPassword), 6, true))
	}
	if utf8.RuneCountInString(ut.OldPassword) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.oldPassword`, ut.OldPassword, utf8.RuneCountInString(ut.OldPassword), 100, false))
	}
	return
}

// facebookRegisterParams user type.
type facebookRegisterParams struct {
	// The email that will be connected to the account
	Email *string `form:"email,omitempty" json:"email,omitempty" yaml:"email,omitempty" xml:"email,omitempty"`
	// The given name for the user
	FirstName *string `form:"firstName,omitempty" json:"firstName,omitempty" yaml:"firstName,omitempty" xml:"firstName,omitempty"`
	// The recaptcha response code
	GRecaptchaResponse *string `form:"gRecaptchaResponse,omitempty" json:"gRecaptchaResponse,omitempty" yaml:"gRecaptchaResponse,omitempty" xml:"gRecaptchaResponse,omitempty"`
	// The family name for the user
	LastName *string `form:"lastName,omitempty" json:"lastName,omitempty" yaml:"lastName,omitempty" xml:"lastName,omitempty"`
	// The key given when the register was approved
	OauthKey *uuid.UUID `form:"oauthKey,omitempty" json:"oauthKey,omitempty" yaml:"oauthKey,omitempty" xml:"oauthKey,omitempty"`
}

// Validate validates the facebookRegisterParams type instance.
func (ut *facebookRegisterParams) Validate() (err error) {
	if ut.Email == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "email"))
	}
	if ut.FirstName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "firstName"))
	}
	if ut.LastName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "lastName"))
	}
	if ut.OauthKey == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "oauthKey"))
	}
	if ut.GRecaptchaResponse == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "gRecaptchaResponse"))
	}
	if ut.Email != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *ut.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`request.email`, *ut.Email, goa.FormatEmail, err2))
		}
	}
	if ut.FirstName != nil {
		if utf8.RuneCountInString(*ut.FirstName) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.firstName`, *ut.FirstName, utf8.RuneCountInString(*ut.FirstName), 2, true))
		}
	}
	if ut.FirstName != nil {
		if utf8.RuneCountInString(*ut.FirstName) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.firstName`, *ut.FirstName, utf8.RuneCountInString(*ut.FirstName), 50, false))
		}
	}
	if ut.LastName != nil {
		if utf8.RuneCountInString(*ut.LastName) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.lastName`, *ut.LastName, utf8.RuneCountInString(*ut.LastName), 2, true))
		}
	}
	if ut.LastName != nil {
		if utf8.RuneCountInString(*ut.LastName) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.lastName`, *ut.LastName, utf8.RuneCountInString(*ut.LastName), 50, false))
		}
	}
	return
}

// Publicize creates FacebookRegisterParams from facebookRegisterParams
func (ut *facebookRegisterParams) Publicize() *FacebookRegisterParams {
	var pub FacebookRegisterParams
	if ut.Email != nil {
		pub.Email = *ut.Email
	}
	if ut.FirstName != nil {
		pub.FirstName = *ut.FirstName
	}
	if ut.GRecaptchaResponse != nil {
		pub.GRecaptchaResponse = *ut.GRecaptchaResponse
	}
	if ut.LastName != nil {
		pub.LastName = *ut.LastName
	}
	if ut.OauthKey != nil {
		pub.OauthKey = *ut.OauthKey
	}
	return &pub
}

// FacebookRegisterParams user type.
type FacebookRegisterParams struct {
	// The email that will be connected to the account
	Email string `form:"email" json:"email" yaml:"email" xml:"email"`
	// The given name for the user
	FirstName string `form:"firstName" json:"firstName" yaml:"firstName" xml:"firstName"`
	// The recaptcha response code
	GRecaptchaResponse string `form:"gRecaptchaResponse" json:"gRecaptchaResponse" yaml:"gRecaptchaResponse" xml:"gRecaptchaResponse"`
	// The family name for the user
	LastName string `form:"lastName" json:"lastName" yaml:"lastName" xml:"lastName"`
	// The key given when the register was approved
	OauthKey uuid.UUID `form:"oauthKey" json:"oauthKey" yaml:"oauthKey" xml:"oauthKey"`
}

// Validate validates the FacebookRegisterParams type instance.
func (ut *FacebookRegisterParams) Validate() (err error) {
	if ut.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "email"))
	}
	if ut.FirstName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "firstName"))
	}
	if ut.LastName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "lastName"))
	}

	if ut.GRecaptchaResponse == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "gRecaptchaResponse"))
	}
	if err2 := goa.ValidateFormat(goa.FormatEmail, ut.Email); err2 != nil {
		err = goa.MergeErrors(err, goa.InvalidFormatError(`type.email`, ut.Email, goa.FormatEmail, err2))
	}
	if utf8.RuneCountInString(ut.FirstName) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.firstName`, ut.FirstName, utf8.RuneCountInString(ut.FirstName), 2, true))
	}
	if utf8.RuneCountInString(ut.FirstName) > 50 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.firstName`, ut.FirstName, utf8.RuneCountInString(ut.FirstName), 50, false))
	}
	if utf8.RuneCountInString(ut.LastName) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.lastName`, ut.LastName, utf8.RuneCountInString(ut.LastName), 2, true))
	}
	if utf8.RuneCountInString(ut.LastName) > 50 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.lastName`, ut.LastName, utf8.RuneCountInString(ut.LastName), 50, false))
	}
	return
}

// googleRegisterParams user type.
type googleRegisterParams struct {
	// The email that will be connected to the account
	Email *string `form:"email,omitempty" json:"email,omitempty" yaml:"email,omitempty" xml:"email,omitempty"`
	// The given name for the user
	FirstName *string `form:"firstName,omitempty" json:"firstName,omitempty" yaml:"firstName,omitempty" xml:"firstName,omitempty"`
	// The recaptcha response code
	GRecaptchaResponse *string `form:"gRecaptchaResponse,omitempty" json:"gRecaptchaResponse,omitempty" yaml:"gRecaptchaResponse,omitempty" xml:"gRecaptchaResponse,omitempty"`
	// The family name for the user
	LastName *string `form:"lastName,omitempty" json:"lastName,omitempty" yaml:"lastName,omitempty" xml:"lastName,omitempty"`
	// The key given when the register was approved
	OauthKey *uuid.UUID `form:"oauthKey,omitempty" json:"oauthKey,omitempty" yaml:"oauthKey,omitempty" xml:"oauthKey,omitempty"`
}

// Validate validates the googleRegisterParams type instance.
func (ut *googleRegisterParams) Validate() (err error) {
	if ut.Email == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "email"))
	}
	if ut.FirstName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "firstName"))
	}
	if ut.LastName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "lastName"))
	}
	if ut.OauthKey == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "oauthKey"))
	}
	if ut.GRecaptchaResponse == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "gRecaptchaResponse"))
	}
	if ut.Email != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *ut.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`request.email`, *ut.Email, goa.FormatEmail, err2))
		}
	}
	if ut.FirstName != nil {
		if utf8.RuneCountInString(*ut.FirstName) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.firstName`, *ut.FirstName, utf8.RuneCountInString(*ut.FirstName), 2, true))
		}
	}
	if ut.FirstName != nil {
		if utf8.RuneCountInString(*ut.FirstName) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.firstName`, *ut.FirstName, utf8.RuneCountInString(*ut.FirstName), 50, false))
		}
	}
	if ut.LastName != nil {
		if utf8.RuneCountInString(*ut.LastName) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.lastName`, *ut.LastName, utf8.RuneCountInString(*ut.LastName), 2, true))
		}
	}
	if ut.LastName != nil {
		if utf8.RuneCountInString(*ut.LastName) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.lastName`, *ut.LastName, utf8.RuneCountInString(*ut.LastName), 50, false))
		}
	}
	return
}

// Publicize creates GoogleRegisterParams from googleRegisterParams
func (ut *googleRegisterParams) Publicize() *GoogleRegisterParams {
	var pub GoogleRegisterParams
	if ut.Email != nil {
		pub.Email = *ut.Email
	}
	if ut.FirstName != nil {
		pub.FirstName = *ut.FirstName
	}
	if ut.GRecaptchaResponse != nil {
		pub.GRecaptchaResponse = *ut.GRecaptchaResponse
	}
	if ut.LastName != nil {
		pub.LastName = *ut.LastName
	}
	if ut.OauthKey != nil {
		pub.OauthKey = *ut.OauthKey
	}
	return &pub
}

// GoogleRegisterParams user type.
type GoogleRegisterParams struct {
	// The email that will be connected to the account
	Email string `form:"email" json:"email" yaml:"email" xml:"email"`
	// The given name for the user
	FirstName string `form:"firstName" json:"firstName" yaml:"firstName" xml:"firstName"`
	// The recaptcha response code
	GRecaptchaResponse string `form:"gRecaptchaResponse" json:"gRecaptchaResponse" yaml:"gRecaptchaResponse" xml:"gRecaptchaResponse"`
	// The family name for the user
	LastName string `form:"lastName" json:"lastName" yaml:"lastName" xml:"lastName"`
	// The key given when the register was approved
	OauthKey uuid.UUID `form:"oauthKey" json:"oauthKey" yaml:"oauthKey" xml:"oauthKey"`
}

// Validate validates the GoogleRegisterParams type instance.
func (ut *GoogleRegisterParams) Validate() (err error) {
	if ut.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "email"))
	}
	if ut.FirstName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "firstName"))
	}
	if ut.LastName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "lastName"))
	}

	if ut.GRecaptchaResponse == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "gRecaptchaResponse"))
	}
	if err2 := goa.ValidateFormat(goa.FormatEmail, ut.Email); err2 != nil {
		err = goa.MergeErrors(err, goa.InvalidFormatError(`type.email`, ut.Email, goa.FormatEmail, err2))
	}
	if utf8.RuneCountInString(ut.FirstName) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.firstName`, ut.FirstName, utf8.RuneCountInString(ut.FirstName), 2, true))
	}
	if utf8.RuneCountInString(ut.FirstName) > 50 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.firstName`, ut.FirstName, utf8.RuneCountInString(ut.FirstName), 50, false))
	}
	if utf8.RuneCountInString(ut.LastName) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.lastName`, ut.LastName, utf8.RuneCountInString(ut.LastName), 2, true))
	}
	if utf8.RuneCountInString(ut.LastName) > 50 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.lastName`, ut.LastName, utf8.RuneCountInString(ut.LastName), 50, false))
	}
	return
}

// linkedinRegisterParams user type.
type linkedinRegisterParams struct {
	// The email that will be connected to the account
	Email *string `form:"email,omitempty" json:"email,omitempty" yaml:"email,omitempty" xml:"email,omitempty"`
	// The given name for the user
	FirstName *string `form:"firstName,omitempty" json:"firstName,omitempty" yaml:"firstName,omitempty" xml:"firstName,omitempty"`
	// The recaptcha response code
	GRecaptchaResponse *string `form:"gRecaptchaResponse,omitempty" json:"gRecaptchaResponse,omitempty" yaml:"gRecaptchaResponse,omitempty" xml:"gRecaptchaResponse,omitempty"`
	// The family name for the user
	LastName *string `form:"lastName,omitempty" json:"lastName,omitempty" yaml:"lastName,omitempty" xml:"lastName,omitempty"`
	// The key given when the register was approved
	OauthKey *uuid.UUID `form:"oauthKey,omitempty" json:"oauthKey,omitempty" yaml:"oauthKey,omitempty" xml:"oauthKey,omitempty"`
}

// Validate validates the linkedinRegisterParams type instance.
func (ut *linkedinRegisterParams) Validate() (err error) {
	if ut.Email == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "email"))
	}
	if ut.FirstName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "firstName"))
	}
	if ut.LastName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "lastName"))
	}
	if ut.OauthKey == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "oauthKey"))
	}
	if ut.GRecaptchaResponse == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "gRecaptchaResponse"))
	}
	if ut.Email != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *ut.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`request.email`, *ut.Email, goa.FormatEmail, err2))
		}
	}
	if ut.FirstName != nil {
		if utf8.RuneCountInString(*ut.FirstName) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.firstName`, *ut.FirstName, utf8.RuneCountInString(*ut.FirstName), 2, true))
		}
	}
	if ut.FirstName != nil {
		if utf8.RuneCountInString(*ut.FirstName) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.firstName`, *ut.FirstName, utf8.RuneCountInString(*ut.FirstName), 50, false))
		}
	}
	if ut.LastName != nil {
		if utf8.RuneCountInString(*ut.LastName) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.lastName`, *ut.LastName, utf8.RuneCountInString(*ut.LastName), 2, true))
		}
	}
	if ut.LastName != nil {
		if utf8.RuneCountInString(*ut.LastName) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.lastName`, *ut.LastName, utf8.RuneCountInString(*ut.LastName), 50, false))
		}
	}
	return
}

// Publicize creates LinkedinRegisterParams from linkedinRegisterParams
func (ut *linkedinRegisterParams) Publicize() *LinkedinRegisterParams {
	var pub LinkedinRegisterParams
	if ut.Email != nil {
		pub.Email = *ut.Email
	}
	if ut.FirstName != nil {
		pub.FirstName = *ut.FirstName
	}
	if ut.GRecaptchaResponse != nil {
		pub.GRecaptchaResponse = *ut.GRecaptchaResponse
	}
	if ut.LastName != nil {
		pub.LastName = *ut.LastName
	}
	if ut.OauthKey != nil {
		pub.OauthKey = *ut.OauthKey
	}
	return &pub
}

// LinkedinRegisterParams user type.
type LinkedinRegisterParams struct {
	// The email that will be connected to the account
	Email string `form:"email" json:"email" yaml:"email" xml:"email"`
	// The given name for the user
	FirstName string `form:"firstName" json:"firstName" yaml:"firstName" xml:"firstName"`
	// The recaptcha response code
	GRecaptchaResponse string `form:"gRecaptchaResponse" json:"gRecaptchaResponse" yaml:"gRecaptchaResponse" xml:"gRecaptchaResponse"`
	// The family name for the user
	LastName string `form:"lastName" json:"lastName" yaml:"lastName" xml:"lastName"`
	// The key given when the register was approved
	OauthKey uuid.UUID `form:"oauthKey" json:"oauthKey" yaml:"oauthKey" xml:"oauthKey"`
}

// Validate validates the LinkedinRegisterParams type instance.
func (ut *LinkedinRegisterParams) Validate() (err error) {
	if ut.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "email"))
	}
	if ut.FirstName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "firstName"))
	}
	if ut.LastName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "lastName"))
	}

	if ut.GRecaptchaResponse == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "gRecaptchaResponse"))
	}
	if err2 := goa.ValidateFormat(goa.FormatEmail, ut.Email); err2 != nil {
		err = goa.MergeErrors(err, goa.InvalidFormatError(`type.email`, ut.Email, goa.FormatEmail, err2))
	}
	if utf8.RuneCountInString(ut.FirstName) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.firstName`, ut.FirstName, utf8.RuneCountInString(ut.FirstName), 2, true))
	}
	if utf8.RuneCountInString(ut.FirstName) > 50 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.firstName`, ut.FirstName, utf8.RuneCountInString(ut.FirstName), 50, false))
	}
	if utf8.RuneCountInString(ut.LastName) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.lastName`, ut.LastName, utf8.RuneCountInString(ut.LastName), 2, true))
	}
	if utf8.RuneCountInString(ut.LastName) > 50 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.lastName`, ut.LastName, utf8.RuneCountInString(ut.LastName), 50, false))
	}
	return
}

// loginParams user type.
type loginParams struct {
	// 2 Factor Auth if user has enabled the feature
	TwoFactor *string `form:"TwoFactor,omitempty" json:"TwoFactor,omitempty" yaml:"TwoFactor,omitempty" xml:"TwoFactor,omitempty"`
	// The email address of the account to login to
	Email *string `form:"email,omitempty" json:"email,omitempty" yaml:"email,omitempty" xml:"email,omitempty"`
	// The password of the account to login to
	Password *string `form:"password,omitempty" json:"password,omitempty" yaml:"password,omitempty" xml:"password,omitempty"`
}

// Validate validates the loginParams type instance.
func (ut *loginParams) Validate() (err error) {
	if ut.Email == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "email"))
	}
	if ut.Password == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "password"))
	}
	if ut.TwoFactor != nil {
		if utf8.RuneCountInString(*ut.TwoFactor) < 6 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.TwoFactor`, *ut.TwoFactor, utf8.RuneCountInString(*ut.TwoFactor), 6, true))
		}
	}
	if ut.TwoFactor != nil {
		if utf8.RuneCountInString(*ut.TwoFactor) > 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.TwoFactor`, *ut.TwoFactor, utf8.RuneCountInString(*ut.TwoFactor), 8, false))
		}
	}
	if ut.Email != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *ut.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`request.email`, *ut.Email, goa.FormatEmail, err2))
		}
	}
	if ut.Password != nil {
		if ok := goa.ValidatePattern(`^.*[\w].*$`, *ut.Password); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`request.password`, *ut.Password, `^.*[\w].*$`))
		}
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) < 6 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 6, true))
		}
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 100, false))
		}
	}
	return
}

// Publicize creates LoginParams from loginParams
func (ut *loginParams) Publicize() *LoginParams {
	var pub LoginParams
	if ut.TwoFactor != nil {
		pub.TwoFactor = ut.TwoFactor
	}
	if ut.Email != nil {
		pub.Email = *ut.Email
	}
	if ut.Password != nil {
		pub.Password = *ut.Password
	}
	return &pub
}

// LoginParams user type.
type LoginParams struct {
	// 2 Factor Auth if user has enabled the feature
	TwoFactor *string `form:"TwoFactor,omitempty" json:"TwoFactor,omitempty" yaml:"TwoFactor,omitempty" xml:"TwoFactor,omitempty"`
	// The email address of the account to login to
	Email string `form:"email" json:"email" yaml:"email" xml:"email"`
	// The password of the account to login to
	Password string `form:"password" json:"password" yaml:"password" xml:"password"`
}

// Validate validates the LoginParams type instance.
func (ut *LoginParams) Validate() (err error) {
	if ut.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "email"))
	}
	if ut.Password == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "password"))
	}
	if ut.TwoFactor != nil {
		if utf8.RuneCountInString(*ut.TwoFactor) < 6 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`type.TwoFactor`, *ut.TwoFactor, utf8.RuneCountInString(*ut.TwoFactor), 6, true))
		}
	}
	if ut.TwoFactor != nil {
		if utf8.RuneCountInString(*ut.TwoFactor) > 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`type.TwoFactor`, *ut.TwoFactor, utf8.RuneCountInString(*ut.TwoFactor), 8, false))
		}
	}
	if err2 := goa.ValidateFormat(goa.FormatEmail, ut.Email); err2 != nil {
		err = goa.MergeErrors(err, goa.InvalidFormatError(`type.email`, ut.Email, goa.FormatEmail, err2))
	}
	if ok := goa.ValidatePattern(`^.*[\w].*$`, ut.Password); !ok {
		err = goa.MergeErrors(err, goa.InvalidPatternError(`type.password`, ut.Password, `^.*[\w].*$`))
	}
	if utf8.RuneCountInString(ut.Password) < 6 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.password`, ut.Password, utf8.RuneCountInString(ut.Password), 6, true))
	}
	if utf8.RuneCountInString(ut.Password) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.password`, ut.Password, utf8.RuneCountInString(ut.Password), 100, false))
	}
	return
}

// microsoftRegisterParams user type.
type microsoftRegisterParams struct {
	// The email that will be connected to the account
	Email *string `form:"email,omitempty" json:"email,omitempty" yaml:"email,omitempty" xml:"email,omitempty"`
	// The given name for the user
	FirstName *string `form:"firstName,omitempty" json:"firstName,omitempty" yaml:"firstName,omitempty" xml:"firstName,omitempty"`
	// The recaptcha response code
	GRecaptchaResponse *string `form:"gRecaptchaResponse,omitempty" json:"gRecaptchaResponse,omitempty" yaml:"gRecaptchaResponse,omitempty" xml:"gRecaptchaResponse,omitempty"`
	// The family name for the user
	LastName *string `form:"lastName,omitempty" json:"lastName,omitempty" yaml:"lastName,omitempty" xml:"lastName,omitempty"`
	// The key given when the register was approved
	OauthKey *uuid.UUID `form:"oauthKey,omitempty" json:"oauthKey,omitempty" yaml:"oauthKey,omitempty" xml:"oauthKey,omitempty"`
}

// Validate validates the microsoftRegisterParams type instance.
func (ut *microsoftRegisterParams) Validate() (err error) {
	if ut.Email == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "email"))
	}
	if ut.FirstName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "firstName"))
	}
	if ut.LastName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "lastName"))
	}
	if ut.OauthKey == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "oauthKey"))
	}
	if ut.GRecaptchaResponse == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "gRecaptchaResponse"))
	}
	if ut.Email != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *ut.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`request.email`, *ut.Email, goa.FormatEmail, err2))
		}
	}
	if ut.FirstName != nil {
		if utf8.RuneCountInString(*ut.FirstName) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.firstName`, *ut.FirstName, utf8.RuneCountInString(*ut.FirstName), 2, true))
		}
	}
	if ut.FirstName != nil {
		if utf8.RuneCountInString(*ut.FirstName) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.firstName`, *ut.FirstName, utf8.RuneCountInString(*ut.FirstName), 50, false))
		}
	}
	if ut.LastName != nil {
		if utf8.RuneCountInString(*ut.LastName) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.lastName`, *ut.LastName, utf8.RuneCountInString(*ut.LastName), 2, true))
		}
	}
	if ut.LastName != nil {
		if utf8.RuneCountInString(*ut.LastName) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.lastName`, *ut.LastName, utf8.RuneCountInString(*ut.LastName), 50, false))
		}
	}
	return
}

// Publicize creates MicrosoftRegisterParams from microsoftRegisterParams
func (ut *microsoftRegisterParams) Publicize() *MicrosoftRegisterParams {
	var pub MicrosoftRegisterParams
	if ut.Email != nil {
		pub.Email = *ut.Email
	}
	if ut.FirstName != nil {
		pub.FirstName = *ut.FirstName
	}
	if ut.GRecaptchaResponse != nil {
		pub.GRecaptchaResponse = *ut.GRecaptchaResponse
	}
	if ut.LastName != nil {
		pub.LastName = *ut.LastName
	}
	if ut.OauthKey != nil {
		pub.OauthKey = *ut.OauthKey
	}
	return &pub
}

// MicrosoftRegisterParams user type.
type MicrosoftRegisterParams struct {
	// The email that will be connected to the account
	Email string `form:"email" json:"email" yaml:"email" xml:"email"`
	// The given name for the user
	FirstName string `form:"firstName" json:"firstName" yaml:"firstName" xml:"firstName"`
	// The recaptcha response code
	GRecaptchaResponse string `form:"gRecaptchaResponse" json:"gRecaptchaResponse" yaml:"gRecaptchaResponse" xml:"gRecaptchaResponse"`
	// The family name for the user
	LastName string `form:"lastName" json:"lastName" yaml:"lastName" xml:"lastName"`
	// The key given when the register was approved
	OauthKey uuid.UUID `form:"oauthKey" json:"oauthKey" yaml:"oauthKey" xml:"oauthKey"`
}

// Validate validates the MicrosoftRegisterParams type instance.
func (ut *MicrosoftRegisterParams) Validate() (err error) {
	if ut.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "email"))
	}
	if ut.FirstName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "firstName"))
	}
	if ut.LastName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "lastName"))
	}

	if ut.GRecaptchaResponse == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "gRecaptchaResponse"))
	}
	if err2 := goa.ValidateFormat(goa.FormatEmail, ut.Email); err2 != nil {
		err = goa.MergeErrors(err, goa.InvalidFormatError(`type.email`, ut.Email, goa.FormatEmail, err2))
	}
	if utf8.RuneCountInString(ut.FirstName) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.firstName`, ut.FirstName, utf8.RuneCountInString(ut.FirstName), 2, true))
	}
	if utf8.RuneCountInString(ut.FirstName) > 50 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.firstName`, ut.FirstName, utf8.RuneCountInString(ut.FirstName), 50, false))
	}
	if utf8.RuneCountInString(ut.LastName) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.lastName`, ut.LastName, utf8.RuneCountInString(ut.LastName), 2, true))
	}
	if utf8.RuneCountInString(ut.LastName) > 50 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.lastName`, ut.LastName, utf8.RuneCountInString(ut.LastName), 50, false))
	}
	return
}

// Parameters to add/remove a newsletter subscriber
type newsletterParam struct {
	Email        *string    `form:"email,omitempty" json:"email,omitempty" yaml:"email,omitempty" xml:"email,omitempty"`
	IsActive     *bool      `form:"isActive,omitempty" json:"isActive,omitempty" yaml:"isActive,omitempty" xml:"isActive,omitempty"`
	SubscribedAt *time.Time `form:"subscribedAt,omitempty" json:"subscribedAt,omitempty" yaml:"subscribedAt,omitempty" xml:"subscribedAt,omitempty"`
}

// Validate validates the newsletterParam type instance.
func (ut *newsletterParam) Validate() (err error) {
	if ut.Email != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *ut.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`request.email`, *ut.Email, goa.FormatEmail, err2))
		}
	}
	return
}

// Publicize creates NewsletterParam from newsletterParam
func (ut *newsletterParam) Publicize() *NewsletterParam {
	var pub NewsletterParam
	if ut.Email != nil {
		pub.Email = ut.Email
	}
	if ut.IsActive != nil {
		pub.IsActive = ut.IsActive
	}
	if ut.SubscribedAt != nil {
		pub.SubscribedAt = ut.SubscribedAt
	}
	return &pub
}

// Parameters to add/remove a newsletter subscriber
type NewsletterParam struct {
	Email        *string    `form:"email,omitempty" json:"email,omitempty" yaml:"email,omitempty" xml:"email,omitempty"`
	IsActive     *bool      `form:"isActive,omitempty" json:"isActive,omitempty" yaml:"isActive,omitempty" xml:"isActive,omitempty"`
	SubscribedAt *time.Time `form:"subscribedAt,omitempty" json:"subscribedAt,omitempty" yaml:"subscribedAt,omitempty" xml:"subscribedAt,omitempty"`
}

// Validate validates the NewsletterParam type instance.
func (ut *NewsletterParam) Validate() (err error) {
	if ut.Email != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *ut.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`type.email`, *ut.Email, goa.FormatEmail, err2))
		}
	}
	return
}

// registerParams user type.
type registerParams struct {
	// Category/Categories that a user might select (User interests)
	Category []string `form:"category,omitempty" json:"category,omitempty" yaml:"category,omitempty" xml:"category,omitempty"`
	// The email that will be attached to the account
	Email *string `form:"email,omitempty" json:"email,omitempty" yaml:"email,omitempty" xml:"email,omitempty"`
	// The user's given name
	FirstName *string `form:"firstName,omitempty" json:"firstName,omitempty" yaml:"firstName,omitempty" xml:"firstName,omitempty"`
	// The recaptcha response code
	GRecaptchaResponse *string `form:"gRecaptchaResponse,omitempty" json:"gRecaptchaResponse,omitempty" yaml:"gRecaptchaResponse,omitempty" xml:"gRecaptchaResponse,omitempty"`
	// The user's family name
	LastName *string `form:"lastName,omitempty" json:"lastName,omitempty" yaml:"lastName,omitempty" xml:"lastName,omitempty"`
	// The password associated with the new account
	Password *string `form:"password,omitempty" json:"password,omitempty" yaml:"password,omitempty" xml:"password,omitempty"`
}

// Validate validates the registerParams type instance.
func (ut *registerParams) Validate() (err error) {
	if ut.Email == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "email"))
	}
	if ut.Password == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "password"))
	}
	if ut.FirstName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "firstName"))
	}
	if ut.LastName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "lastName"))
	}
	if ut.GRecaptchaResponse == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "gRecaptchaResponse"))
	}
	if ut.Category == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "category"))
	}
	if ut.Email != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *ut.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`request.email`, *ut.Email, goa.FormatEmail, err2))
		}
	}
	if ut.FirstName != nil {
		if utf8.RuneCountInString(*ut.FirstName) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.firstName`, *ut.FirstName, utf8.RuneCountInString(*ut.FirstName), 2, true))
		}
	}
	if ut.FirstName != nil {
		if utf8.RuneCountInString(*ut.FirstName) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.firstName`, *ut.FirstName, utf8.RuneCountInString(*ut.FirstName), 50, false))
		}
	}
	if ut.LastName != nil {
		if utf8.RuneCountInString(*ut.LastName) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.lastName`, *ut.LastName, utf8.RuneCountInString(*ut.LastName), 50, false))
		}
	}
	if ut.Password != nil {
		if ok := goa.ValidatePattern(`^.*[\w].*$`, *ut.Password); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`request.password`, *ut.Password, `^.*[\w].*$`))
		}
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) < 6 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 6, true))
		}
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 100, false))
		}
	}
	return
}

// Publicize creates RegisterParams from registerParams
func (ut *registerParams) Publicize() *RegisterParams {
	var pub RegisterParams
	if ut.Category != nil {
		pub.Category = ut.Category
	}
	if ut.Email != nil {
		pub.Email = *ut.Email
	}
	if ut.FirstName != nil {
		pub.FirstName = *ut.FirstName
	}
	if ut.GRecaptchaResponse != nil {
		pub.GRecaptchaResponse = *ut.GRecaptchaResponse
	}
	if ut.LastName != nil {
		pub.LastName = *ut.LastName
	}
	if ut.Password != nil {
		pub.Password = *ut.Password
	}
	return &pub
}

// RegisterParams user type.
type RegisterParams struct {
	// Category/Categories that a user might select (User interests)
	Category []string `form:"category" json:"category" yaml:"category" xml:"category"`
	// The email that will be attached to the account
	Email string `form:"email" json:"email" yaml:"email" xml:"email"`
	// The user's given name
	FirstName string `form:"firstName" json:"firstName" yaml:"firstName" xml:"firstName"`
	// The recaptcha response code
	GRecaptchaResponse string `form:"gRecaptchaResponse" json:"gRecaptchaResponse" yaml:"gRecaptchaResponse" xml:"gRecaptchaResponse"`
	// The user's family name
	LastName string `form:"lastName" json:"lastName" yaml:"lastName" xml:"lastName"`
	// The password associated with the new account
	Password string `form:"password" json:"password" yaml:"password" xml:"password"`
}

// Validate validates the RegisterParams type instance.
func (ut *RegisterParams) Validate() (err error) {
	if ut.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "email"))
	}
	if ut.Password == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "password"))
	}
	if ut.FirstName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "firstName"))
	}
	if ut.LastName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "lastName"))
	}
	if ut.GRecaptchaResponse == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "gRecaptchaResponse"))
	}
	if ut.Category == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "category"))
	}
	if err2 := goa.ValidateFormat(goa.FormatEmail, ut.Email); err2 != nil {
		err = goa.MergeErrors(err, goa.InvalidFormatError(`type.email`, ut.Email, goa.FormatEmail, err2))
	}
	if utf8.RuneCountInString(ut.FirstName) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.firstName`, ut.FirstName, utf8.RuneCountInString(ut.FirstName), 2, true))
	}
	if utf8.RuneCountInString(ut.FirstName) > 50 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.firstName`, ut.FirstName, utf8.RuneCountInString(ut.FirstName), 50, false))
	}
	if utf8.RuneCountInString(ut.LastName) > 50 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.lastName`, ut.LastName, utf8.RuneCountInString(ut.LastName), 50, false))
	}
	if ok := goa.ValidatePattern(`^.*[\w].*$`, ut.Password); !ok {
		err = goa.MergeErrors(err, goa.InvalidPatternError(`type.password`, ut.Password, `^.*[\w].*$`))
	}
	if utf8.RuneCountInString(ut.Password) < 6 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.password`, ut.Password, utf8.RuneCountInString(ut.Password), 6, true))
	}
	if utf8.RuneCountInString(ut.Password) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.password`, ut.Password, utf8.RuneCountInString(ut.Password), 100, false))
	}
	return
}

// resetPasswordParams user type.
type resetPasswordParams struct {
	// The new password that will be used to login to the account
	NewPassword *string `form:"newPassword,omitempty" json:"newPassword,omitempty" yaml:"newPassword,omitempty" xml:"newPassword,omitempty"`
	// The UUID of the password reset, send from the user's email
	ResetCode *string `form:"resetCode,omitempty" json:"resetCode,omitempty" yaml:"resetCode,omitempty" xml:"resetCode,omitempty"`
	// The ID of the user to reset the password of
	UserID *string `form:"userID,omitempty" json:"userID,omitempty" yaml:"userID,omitempty" xml:"userID,omitempty"`
}

// Validate validates the resetPasswordParams type instance.
func (ut *resetPasswordParams) Validate() (err error) {
	if ut.ResetCode == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "resetCode"))
	}
	if ut.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "userID"))
	}
	if ut.NewPassword == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "newPassword"))
	}
	if ut.NewPassword != nil {
		if ok := goa.ValidatePattern(`^.*[\w].*$`, *ut.NewPassword); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`request.newPassword`, *ut.NewPassword, `^.*[\w].*$`))
		}
	}
	if ut.NewPassword != nil {
		if utf8.RuneCountInString(*ut.NewPassword) < 6 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.newPassword`, *ut.NewPassword, utf8.RuneCountInString(*ut.NewPassword), 6, true))
		}
	}
	if ut.NewPassword != nil {
		if utf8.RuneCountInString(*ut.NewPassword) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.newPassword`, *ut.NewPassword, utf8.RuneCountInString(*ut.NewPassword), 100, false))
		}
	}
	return
}

// Publicize creates ResetPasswordParams from resetPasswordParams
func (ut *resetPasswordParams) Publicize() *ResetPasswordParams {
	var pub ResetPasswordParams
	if ut.NewPassword != nil {
		pub.NewPassword = *ut.NewPassword
	}
	if ut.ResetCode != nil {
		pub.ResetCode = *ut.ResetCode
	}
	if ut.UserID != nil {
		pub.UserID = *ut.UserID
	}
	return &pub
}

// ResetPasswordParams user type.
type ResetPasswordParams struct {
	// The new password that will be used to login to the account
	NewPassword string `form:"newPassword" json:"newPassword" yaml:"newPassword" xml:"newPassword"`
	// The UUID of the password reset, send from the user's email
	ResetCode string `form:"resetCode" json:"resetCode" yaml:"resetCode" xml:"resetCode"`
	// The ID of the user to reset the password of
	UserID string `form:"userID" json:"userID" yaml:"userID" xml:"userID"`
}

// Validate validates the ResetPasswordParams type instance.
func (ut *ResetPasswordParams) Validate() (err error) {
	if ut.ResetCode == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "resetCode"))
	}
	if ut.UserID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "userID"))
	}
	if ut.NewPassword == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "newPassword"))
	}
	if ok := goa.ValidatePattern(`^.*[\w].*$`, ut.NewPassword); !ok {
		err = goa.MergeErrors(err, goa.InvalidPatternError(`type.newPassword`, ut.NewPassword, `^.*[\w].*$`))
	}
	if utf8.RuneCountInString(ut.NewPassword) < 6 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.newPassword`, ut.NewPassword, utf8.RuneCountInString(ut.NewPassword), 6, true))
	}
	if utf8.RuneCountInString(ut.NewPassword) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.newPassword`, ut.NewPassword, utf8.RuneCountInString(ut.NewPassword), 100, false))
	}
	return
}

// twitterRegisterParams user type.
type twitterRegisterParams struct {
	// The email that will be connected to the account
	Email *string `form:"email,omitempty" json:"email,omitempty" yaml:"email,omitempty" xml:"email,omitempty"`
	// The given name for the user
	FirstName *string `form:"firstName,omitempty" json:"firstName,omitempty" yaml:"firstName,omitempty" xml:"firstName,omitempty"`
	// The recaptcha response code
	GRecaptchaResponse *string `form:"gRecaptchaResponse,omitempty" json:"gRecaptchaResponse,omitempty" yaml:"gRecaptchaResponse,omitempty" xml:"gRecaptchaResponse,omitempty"`
	// The family name for the user
	LastName *string `form:"lastName,omitempty" json:"lastName,omitempty" yaml:"lastName,omitempty" xml:"lastName,omitempty"`
	// The key given when the register was approved
	OauthKey *uuid.UUID `form:"oauthKey,omitempty" json:"oauthKey,omitempty" yaml:"oauthKey,omitempty" xml:"oauthKey,omitempty"`
}

// Validate validates the twitterRegisterParams type instance.
func (ut *twitterRegisterParams) Validate() (err error) {
	if ut.Email == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "email"))
	}
	if ut.FirstName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "firstName"))
	}
	if ut.LastName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "lastName"))
	}
	if ut.OauthKey == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "oauthKey"))
	}
	if ut.GRecaptchaResponse == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "gRecaptchaResponse"))
	}
	if ut.Email != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *ut.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`request.email`, *ut.Email, goa.FormatEmail, err2))
		}
	}
	if ut.FirstName != nil {
		if utf8.RuneCountInString(*ut.FirstName) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.firstName`, *ut.FirstName, utf8.RuneCountInString(*ut.FirstName), 2, true))
		}
	}
	if ut.FirstName != nil {
		if utf8.RuneCountInString(*ut.FirstName) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.firstName`, *ut.FirstName, utf8.RuneCountInString(*ut.FirstName), 50, false))
		}
	}
	if ut.LastName != nil {
		if utf8.RuneCountInString(*ut.LastName) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.lastName`, *ut.LastName, utf8.RuneCountInString(*ut.LastName), 2, true))
		}
	}
	if ut.LastName != nil {
		if utf8.RuneCountInString(*ut.LastName) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.lastName`, *ut.LastName, utf8.RuneCountInString(*ut.LastName), 50, false))
		}
	}
	return
}

// Publicize creates TwitterRegisterParams from twitterRegisterParams
func (ut *twitterRegisterParams) Publicize() *TwitterRegisterParams {
	var pub TwitterRegisterParams
	if ut.Email != nil {
		pub.Email = *ut.Email
	}
	if ut.FirstName != nil {
		pub.FirstName = *ut.FirstName
	}
	if ut.GRecaptchaResponse != nil {
		pub.GRecaptchaResponse = *ut.GRecaptchaResponse
	}
	if ut.LastName != nil {
		pub.LastName = *ut.LastName
	}
	if ut.OauthKey != nil {
		pub.OauthKey = *ut.OauthKey
	}
	return &pub
}

// TwitterRegisterParams user type.
type TwitterRegisterParams struct {
	// The email that will be connected to the account
	Email string `form:"email" json:"email" yaml:"email" xml:"email"`
	// The given name for the user
	FirstName string `form:"firstName" json:"firstName" yaml:"firstName" xml:"firstName"`
	// The recaptcha response code
	GRecaptchaResponse string `form:"gRecaptchaResponse" json:"gRecaptchaResponse" yaml:"gRecaptchaResponse" xml:"gRecaptchaResponse"`
	// The family name for the user
	LastName string `form:"lastName" json:"lastName" yaml:"lastName" xml:"lastName"`
	// The key given when the register was approved
	OauthKey uuid.UUID `form:"oauthKey" json:"oauthKey" yaml:"oauthKey" xml:"oauthKey"`
}

// Validate validates the TwitterRegisterParams type instance.
func (ut *TwitterRegisterParams) Validate() (err error) {
	if ut.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "email"))
	}
	if ut.FirstName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "firstName"))
	}
	if ut.LastName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "lastName"))
	}

	if ut.GRecaptchaResponse == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "gRecaptchaResponse"))
	}
	if err2 := goa.ValidateFormat(goa.FormatEmail, ut.Email); err2 != nil {
		err = goa.MergeErrors(err, goa.InvalidFormatError(`type.email`, ut.Email, goa.FormatEmail, err2))
	}
	if utf8.RuneCountInString(ut.FirstName) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.firstName`, ut.FirstName, utf8.RuneCountInString(ut.FirstName), 2, true))
	}
	if utf8.RuneCountInString(ut.FirstName) > 50 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.firstName`, ut.FirstName, utf8.RuneCountInString(ut.FirstName), 50, false))
	}
	if utf8.RuneCountInString(ut.LastName) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.lastName`, ut.LastName, utf8.RuneCountInString(ut.LastName), 2, true))
	}
	if utf8.RuneCountInString(ut.LastName) > 50 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.lastName`, ut.LastName, utf8.RuneCountInString(ut.LastName), 50, false))
	}
	return
}

// userParams user type.
type userParams struct {
	// Category/Categories that a user might select (User interests)
	Category []string `form:"category,omitempty" json:"category,omitempty" yaml:"category,omitempty" xml:"category,omitempty"`
	// The primary email of the user
	Email *string `form:"email,omitempty" json:"email,omitempty" yaml:"email,omitempty" xml:"email,omitempty"`
	// Given name for the user
	FirstName *string `form:"firstName,omitempty" json:"firstName,omitempty" yaml:"firstName,omitempty" xml:"firstName,omitempty"`
	Gender    *string `form:"gender,omitempty" json:"gender,omitempty" yaml:"gender,omitempty" xml:"gender,omitempty"`
	// True if the user wants to receive the newsletter
	GetNewsletter *bool `form:"getNewsletter,omitempty" json:"getNewsletter,omitempty" yaml:"getNewsletter,omitempty" xml:"getNewsletter,omitempty"`
	// True if user is a event author
	IsEventAuthor *bool `form:"isEventAuthor,omitempty" json:"isEventAuthor,omitempty" yaml:"isEventAuthor,omitempty" xml:"isEventAuthor,omitempty"`
	// True if user is a plugin author
	IsPluginAuthor *bool `form:"isPluginAuthor,omitempty" json:"isPluginAuthor,omitempty" yaml:"isPluginAuthor,omitempty" xml:"isPluginAuthor,omitempty"`
	// Family name for the user
	LastName     *string `form:"lastName,omitempty" json:"lastName,omitempty" yaml:"lastName,omitempty" xml:"lastName,omitempty"`
	Phone        *string `form:"phone,omitempty" json:"phone,omitempty" yaml:"phone,omitempty" xml:"phone,omitempty"`
	ProfileImage *string `form:"profileImage,omitempty" json:"profileImage,omitempty" yaml:"profileImage,omitempty" xml:"profileImage,omitempty"`
}

// Validate validates the userParams type instance.
func (ut *userParams) Validate() (err error) {
	if ut.Email != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *ut.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`request.email`, *ut.Email, goa.FormatEmail, err2))
		}
	}
	if ut.FirstName != nil {
		if utf8.RuneCountInString(*ut.FirstName) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.firstName`, *ut.FirstName, utf8.RuneCountInString(*ut.FirstName), 2, true))
		}
	}
	if ut.FirstName != nil {
		if utf8.RuneCountInString(*ut.FirstName) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.firstName`, *ut.FirstName, utf8.RuneCountInString(*ut.FirstName), 50, false))
		}
	}
	if ut.LastName != nil {
		if utf8.RuneCountInString(*ut.LastName) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.lastName`, *ut.LastName, utf8.RuneCountInString(*ut.LastName), 2, true))
		}
	}
	if ut.LastName != nil {
		if utf8.RuneCountInString(*ut.LastName) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.lastName`, *ut.LastName, utf8.RuneCountInString(*ut.LastName), 50, false))
		}
	}
	return
}

// Publicize creates UserParams from userParams
func (ut *userParams) Publicize() *UserParams {
	var pub UserParams
	if ut.Category != nil {
		pub.Category = ut.Category
	}
	if ut.Email != nil {
		pub.Email = ut.Email
	}
	if ut.FirstName != nil {
		pub.FirstName = ut.FirstName
	}
	if ut.Gender != nil {
		pub.Gender = ut.Gender
	}
	if ut.GetNewsletter != nil {
		pub.GetNewsletter = ut.GetNewsletter
	}
	if ut.IsEventAuthor != nil {
		pub.IsEventAuthor = ut.IsEventAuthor
	}
	if ut.IsPluginAuthor != nil {
		pub.IsPluginAuthor = ut.IsPluginAuthor
	}
	if ut.LastName != nil {
		pub.LastName = ut.LastName
	}
	if ut.Phone != nil {
		pub.Phone = ut.Phone
	}
	if ut.ProfileImage != nil {
		pub.ProfileImage = ut.ProfileImage
	}
	return &pub
}

// UserParams user type.
type UserParams struct {
	// Category/Categories that a user might select (User interests)
	Category []string `form:"category,omitempty" json:"category,omitempty" yaml:"category,omitempty" xml:"category,omitempty"`
	// The primary email of the user
	Email *string `form:"email,omitempty" json:"email,omitempty" yaml:"email,omitempty" xml:"email,omitempty"`
	// Given name for the user
	FirstName *string `form:"firstName,omitempty" json:"firstName,omitempty" yaml:"firstName,omitempty" xml:"firstName,omitempty"`
	Gender    *string `form:"gender,omitempty" json:"gender,omitempty" yaml:"gender,omitempty" xml:"gender,omitempty"`
	// True if the user wants to receive the newsletter
	GetNewsletter *bool `form:"getNewsletter,omitempty" json:"getNewsletter,omitempty" yaml:"getNewsletter,omitempty" xml:"getNewsletter,omitempty"`
	// True if user is a event author
	IsEventAuthor *bool `form:"isEventAuthor,omitempty" json:"isEventAuthor,omitempty" yaml:"isEventAuthor,omitempty" xml:"isEventAuthor,omitempty"`
	// True if user is a plugin author
	IsPluginAuthor *bool `form:"isPluginAuthor,omitempty" json:"isPluginAuthor,omitempty" yaml:"isPluginAuthor,omitempty" xml:"isPluginAuthor,omitempty"`
	// Family name for the user
	LastName     *string `form:"lastName,omitempty" json:"lastName,omitempty" yaml:"lastName,omitempty" xml:"lastName,omitempty"`
	Phone        *string `form:"phone,omitempty" json:"phone,omitempty" yaml:"phone,omitempty" xml:"phone,omitempty"`
	ProfileImage *string `form:"profileImage,omitempty" json:"profileImage,omitempty" yaml:"profileImage,omitempty" xml:"profileImage,omitempty"`
}

// Validate validates the UserParams type instance.
func (ut *UserParams) Validate() (err error) {
	if ut.Email != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *ut.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`type.email`, *ut.Email, goa.FormatEmail, err2))
		}
	}
	if ut.FirstName != nil {
		if utf8.RuneCountInString(*ut.FirstName) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`type.firstName`, *ut.FirstName, utf8.RuneCountInString(*ut.FirstName), 2, true))
		}
	}
	if ut.FirstName != nil {
		if utf8.RuneCountInString(*ut.FirstName) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`type.firstName`, *ut.FirstName, utf8.RuneCountInString(*ut.FirstName), 50, false))
		}
	}
	if ut.LastName != nil {
		if utf8.RuneCountInString(*ut.LastName) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`type.lastName`, *ut.LastName, utf8.RuneCountInString(*ut.LastName), 2, true))
		}
	}
	if ut.LastName != nil {
		if utf8.RuneCountInString(*ut.LastName) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`type.lastName`, *ut.LastName, utf8.RuneCountInString(*ut.LastName), 50, false))
		}
	}
	return
}

// userParamsAdmin user type.
type userParamsAdmin struct {
	GetNewsletter  *bool `form:"getNewsletter,omitempty" json:"getNewsletter,omitempty" yaml:"getNewsletter,omitempty" xml:"getNewsletter,omitempty"`
	IsAdmin        *bool `form:"isAdmin,omitempty" json:"isAdmin,omitempty" yaml:"isAdmin,omitempty" xml:"isAdmin,omitempty"`
	IsEventAuthor  *bool `form:"isEventAuthor,omitempty" json:"isEventAuthor,omitempty" yaml:"isEventAuthor,omitempty" xml:"isEventAuthor,omitempty"`
	IsPluginAuthor *bool `form:"isPluginAuthor,omitempty" json:"isPluginAuthor,omitempty" yaml:"isPluginAuthor,omitempty" xml:"isPluginAuthor,omitempty"`
	VerifiedEmail  *bool `form:"verifiedEmail,omitempty" json:"verifiedEmail,omitempty" yaml:"verifiedEmail,omitempty" xml:"verifiedEmail,omitempty"`
}

// Publicize creates UserParamsAdmin from userParamsAdmin
func (ut *userParamsAdmin) Publicize() *UserParamsAdmin {
	var pub UserParamsAdmin
	if ut.GetNewsletter != nil {
		pub.GetNewsletter = ut.GetNewsletter
	}
	if ut.IsAdmin != nil {
		pub.IsAdmin = ut.IsAdmin
	}
	if ut.IsEventAuthor != nil {
		pub.IsEventAuthor = ut.IsEventAuthor
	}
	if ut.IsPluginAuthor != nil {
		pub.IsPluginAuthor = ut.IsPluginAuthor
	}
	if ut.VerifiedEmail != nil {
		pub.VerifiedEmail = ut.VerifiedEmail
	}
	return &pub
}

// UserParamsAdmin user type.
type UserParamsAdmin struct {
	GetNewsletter  *bool `form:"getNewsletter,omitempty" json:"getNewsletter,omitempty" yaml:"getNewsletter,omitempty" xml:"getNewsletter,omitempty"`
	IsAdmin        *bool `form:"isAdmin,omitempty" json:"isAdmin,omitempty" yaml:"isAdmin,omitempty" xml:"isAdmin,omitempty"`
	IsEventAuthor  *bool `form:"isEventAuthor,omitempty" json:"isEventAuthor,omitempty" yaml:"isEventAuthor,omitempty" xml:"isEventAuthor,omitempty"`
	IsPluginAuthor *bool `form:"isPluginAuthor,omitempty" json:"isPluginAuthor,omitempty" yaml:"isPluginAuthor,omitempty" xml:"isPluginAuthor,omitempty"`
	VerifiedEmail  *bool `form:"verifiedEmail,omitempty" json:"verifiedEmail,omitempty" yaml:"verifiedEmail,omitempty" xml:"verifiedEmail,omitempty"`
}

// userPlugin user type.
type userPlugin struct {
	PermissionsAllowed []string `form:"permissionsAllowed,omitempty" json:"permissionsAllowed,omitempty" yaml:"permissionsAllowed,omitempty" xml:"permissionsAllowed,omitempty"`
	PluginID           *string  `form:"pluginID,omitempty" json:"pluginID,omitempty" yaml:"pluginID,omitempty" xml:"pluginID,omitempty"`
}

// Publicize creates UserPlugin from userPlugin
func (ut *userPlugin) Publicize() *UserPlugin {
	var pub UserPlugin
	if ut.PermissionsAllowed != nil {
		pub.PermissionsAllowed = ut.PermissionsAllowed
	}
	if ut.PluginID != nil {
		pub.PluginID = ut.PluginID
	}
	return &pub
}

// UserPlugin user type.
type UserPlugin struct {
	PermissionsAllowed []string `form:"permissionsAllowed,omitempty" json:"permissionsAllowed,omitempty" yaml:"permissionsAllowed,omitempty" xml:"permissionsAllowed,omitempty"`
	PluginID           *string  `form:"pluginID,omitempty" json:"pluginID,omitempty" yaml:"pluginID,omitempty" xml:"pluginID,omitempty"`
}
