// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "user": newsletter Resource Client
//
// Command:
// $ goagen
// --design=gigglesearch.org/giggle-auth/auth/design
// --out=$(GOPATH)/src/gigglesearch.org/giggle-auth/auth
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// AddSubscriberNewsletterPath computes a request path to the add-subscriber action of newsletter.
func AddSubscriberNewsletterPath() string {

	return fmt.Sprintf("/api/v1/user/newsletter")
}

// Add a new newsletter subscriber
func (c *Client) AddSubscriberNewsletter(ctx context.Context, path string, payload *NewsletterParam, contentType string) (*http.Response, error) {
	req, err := c.NewAddSubscriberNewsletterRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewAddSubscriberNewsletterRequest create the request corresponding to the add-subscriber action endpoint of the newsletter resource.
func (c *Client) NewAddSubscriberNewsletterRequest(ctx context.Context, path string, payload *NewsletterParam, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.KeySigner != nil {
		if err := c.KeySigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// GetSubscriberByEmailNewsletterPath computes a request path to the get-subscriber-by-email action of newsletter.
func GetSubscriberByEmailNewsletterPath() string {

	return fmt.Sprintf("/api/v1/user/newsletter")
}

// Get a Subscriber using their email
func (c *Client) GetSubscriberByEmailNewsletter(ctx context.Context, path string, email *string) (*http.Response, error) {
	req, err := c.NewGetSubscriberByEmailNewsletterRequest(ctx, path, email)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewGetSubscriberByEmailNewsletterRequest create the request corresponding to the get-subscriber-by-email action endpoint of the newsletter resource.
func (c *Client) NewGetSubscriberByEmailNewsletterRequest(ctx context.Context, path string, email *string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if email != nil {
		values.Set("email", *email)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.KeySigner != nil {
		if err := c.KeySigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// GetSubscribersNewsletterPath computes a request path to the get-subscribers action of newsletter.
func GetSubscribersNewsletterPath() string {

	return fmt.Sprintf("/api/v1/user/newsletter/all")
}

// Get All Subscribers
func (c *Client) GetSubscribersNewsletter(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewGetSubscribersNewsletterRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewGetSubscribersNewsletterRequest create the request corresponding to the get-subscribers action endpoint of the newsletter resource.
func (c *Client) NewGetSubscribersNewsletterRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// RemoveSubscriberNewsletterPath computes a request path to the remove-subscriber action of newsletter.
func RemoveSubscriberNewsletterPath() string {

	return fmt.Sprintf("/api/v1/user/newsletter")
}

// Remove a newsletter subscriber
func (c *Client) RemoveSubscriberNewsletter(ctx context.Context, path string, email *string) (*http.Response, error) {
	req, err := c.NewRemoveSubscriberNewsletterRequest(ctx, path, email)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewRemoveSubscriberNewsletterRequest create the request corresponding to the remove-subscriber action endpoint of the newsletter resource.
func (c *Client) NewRemoveSubscriberNewsletterRequest(ctx context.Context, path string, email *string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if email != nil {
		values.Set("email", *email)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.KeySigner != nil {
		if err := c.KeySigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// UpdateSubscriberNewsletterPath computes a request path to the update-subscriber action of newsletter.
func UpdateSubscriberNewsletterPath() string {

	return fmt.Sprintf("/api/v1/user/newsletter")
}

// Update a newsletter subscriber
func (c *Client) UpdateSubscriberNewsletter(ctx context.Context, path string, payload *NewsletterParam, contentType string) (*http.Response, error) {
	req, err := c.NewUpdateSubscriberNewsletterRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateSubscriberNewsletterRequest create the request corresponding to the update-subscriber action endpoint of the newsletter resource.
func (c *Client) NewUpdateSubscriberNewsletterRequest(ctx context.Context, path string, payload *NewsletterParam, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PATCH", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.KeySigner != nil {
		if err := c.KeySigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}
