// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "user": microsoft Resource Client
//
// Command:
// $ goagen
// --design=gigglesearch.org/giggle-auth/auth/design
// --out=$(GOPATH)/src/gigglesearch.org/giggle-auth/auth
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	uuid "github.com/goadesign/goa/uuid"
	"net/http"
	"net/url"
)

// AttachToAccountMicrosoftPath computes a request path to the attach-to-account action of microsoft.
func AttachToAccountMicrosoftPath() string {

	return fmt.Sprintf("/api/v1/user/auth/microsoft/attach")
}

// Attaches a Microsoft account to an existing user account, returns the URL the browser should be redirected to
func (c *Client) AttachToAccountMicrosoft(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewAttachToAccountMicrosoftRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewAttachToAccountMicrosoftRequest create the request corresponding to the attach-to-account action endpoint of the microsoft resource.
func (c *Client) NewAttachToAccountMicrosoftRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// DetachFromAccountMicrosoftPath computes a request path to the detach-from-account action of microsoft.
func DetachFromAccountMicrosoftPath() string {

	return fmt.Sprintf("/api/v1/user/auth/microsoft/detach")
}

// Detaches a Microsoft account from an existing user account.
func (c *Client) DetachFromAccountMicrosoft(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDetachFromAccountMicrosoftRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDetachFromAccountMicrosoftRequest create the request corresponding to the detach-from-account action endpoint of the microsoft resource.
func (c *Client) NewDetachFromAccountMicrosoftRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// LoginMicrosoftPath computes a request path to the login action of microsoft.
func LoginMicrosoftPath() string {

	return fmt.Sprintf("/api/v1/user/auth/microsoft/login")
}

// Gets the URL the front-end should redirect the browser to in order to be authenticated with Microsoft, to be logged in
func (c *Client) LoginMicrosoft(ctx context.Context, path string, token *uuid.UUID) (*http.Response, error) {
	req, err := c.NewLoginMicrosoftRequest(ctx, path, token)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewLoginMicrosoftRequest create the request corresponding to the login action endpoint of the microsoft resource.
func (c *Client) NewLoginMicrosoftRequest(ctx context.Context, path string, token *uuid.UUID) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if token != nil {
		tmp96 := token.String()
		values.Set("token", tmp96)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.KeySigner != nil {
		if err := c.KeySigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ReceiveMicrosoftPath computes a request path to the receive action of microsoft.
func ReceiveMicrosoftPath() string {

	return fmt.Sprintf("/api/v1/user/auth/microsoft/receive")
}

// The endpoint that Microsoft redirects the browser to after the user has authenticated
func (c *Client) ReceiveMicrosoft(ctx context.Context, path string, code string, state uuid.UUID) (*http.Response, error) {
	req, err := c.NewReceiveMicrosoftRequest(ctx, path, code, state)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewReceiveMicrosoftRequest create the request corresponding to the receive action endpoint of the microsoft resource.
func (c *Client) NewReceiveMicrosoftRequest(ctx context.Context, path string, code string, state uuid.UUID) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	values.Set("code", code)
	tmp97 := state.String()
	values.Set("state", tmp97)
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.KeySigner != nil {
		if err := c.KeySigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// RegisterMicrosoftPath computes a request path to the register action of microsoft.
func RegisterMicrosoftPath() string {

	return fmt.Sprintf("/api/v1/user/auth/microsoft/register")
}

// Registers a new account with the system, with Microsoft as the login system
func (c *Client) RegisterMicrosoft(ctx context.Context, path string, payload *MicrosoftRegisterParams, contentType string) (*http.Response, error) {
	req, err := c.NewRegisterMicrosoftRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewRegisterMicrosoftRequest create the request corresponding to the register action endpoint of the microsoft resource.
func (c *Client) NewRegisterMicrosoftRequest(ctx context.Context, path string, payload *MicrosoftRegisterParams, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.KeySigner != nil {
		if err := c.KeySigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// RegisterURLMicrosoftPath computes a request path to the register-url action of microsoft.
func RegisterURLMicrosoftPath() string {

	return fmt.Sprintf("/api/v1/user/auth/microsoft/register-start")
}

// Gets the URL the front-end should redirect the browser to in order to be authenticated with Microsoft, and then register
func (c *Client) RegisterURLMicrosoft(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewRegisterURLMicrosoftRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewRegisterURLMicrosoftRequest create the request corresponding to the register-url action endpoint of the microsoft resource.
func (c *Client) NewRegisterURLMicrosoftRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.KeySigner != nil {
		if err := c.KeySigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}
