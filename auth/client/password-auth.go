// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "user": password-auth Resource Client
//
// Command:
// $ goagen
// --design=gigglesearch.org/giggle-auth/auth/design
// --out=$(GOPATH)/src/gigglesearch.org/giggle-auth/auth
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	uuid "github.com/goadesign/goa/uuid"
	"net/http"
	"net/url"
)

// ChangePasswordPasswordAuthPath computes a request path to the change-password action of password-auth.
func ChangePasswordPasswordAuthPath() string {

	return fmt.Sprintf("/api/v1/user/auth/change-password")
}

// Changes the user's current password to a new one, also adds a password to the account if there is none
func (c *Client) ChangePasswordPasswordAuth(ctx context.Context, path string, payload *ChangePasswordParams, contentType string) (*http.Response, error) {
	req, err := c.NewChangePasswordPasswordAuthRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewChangePasswordPasswordAuthRequest create the request corresponding to the change-password action endpoint of the password-auth resource.
func (c *Client) NewChangePasswordPasswordAuthRequest(ctx context.Context, path string, payload *ChangePasswordParams, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ConfirmResetPasswordAuthPath computes a request path to the confirm-reset action of password-auth.
func ConfirmResetPasswordAuthPath() string {

	return fmt.Sprintf("/api/v1/user/auth/finalize-reset")
}

// Confirms that a reset has been completed and changes the password to the new one passed in
func (c *Client) ConfirmResetPasswordAuth(ctx context.Context, path string, payload *ResetPasswordParams, contentType string) (*http.Response, error) {
	req, err := c.NewConfirmResetPasswordAuthRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewConfirmResetPasswordAuthRequest create the request corresponding to the confirm-reset action endpoint of the password-auth resource.
func (c *Client) NewConfirmResetPasswordAuthRequest(ctx context.Context, path string, payload *ResetPasswordParams, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.KeySigner != nil {
		if err := c.KeySigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// LoginPasswordAuthPath computes a request path to the login action of password-auth.
func LoginPasswordAuthPath() string {

	return fmt.Sprintf("/api/v1/user/auth/login")
}

// Login a user using an email and password
func (c *Client) LoginPasswordAuth(ctx context.Context, path string, payload *LoginParams, token *uuid.UUID, contentType string) (*http.Response, error) {
	req, err := c.NewLoginPasswordAuthRequest(ctx, path, payload, token, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewLoginPasswordAuthRequest create the request corresponding to the login action endpoint of the password-auth resource.
func (c *Client) NewLoginPasswordAuthRequest(ctx context.Context, path string, payload *LoginParams, token *uuid.UUID, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if token != nil {
		tmp98 := token.String()
		values.Set("token", tmp98)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.KeySigner != nil {
		if err := c.KeySigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// RegisterPasswordAuthPath computes a request path to the register action of password-auth.
func RegisterPasswordAuthPath() string {

	return fmt.Sprintf("/api/v1/user/auth/register")
}

// Register a new user with an email and password
func (c *Client) RegisterPasswordAuth(ctx context.Context, path string, payload *RegisterParams, contentType string) (*http.Response, error) {
	req, err := c.NewRegisterPasswordAuthRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewRegisterPasswordAuthRequest create the request corresponding to the register action endpoint of the password-auth resource.
func (c *Client) NewRegisterPasswordAuthRequest(ctx context.Context, path string, payload *RegisterParams, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.KeySigner != nil {
		if err := c.KeySigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// RemovePasswordAuthPath computes a request path to the remove action of password-auth.
func RemovePasswordAuthPath() string {

	return fmt.Sprintf("/api/v1/user/auth/remove-password")
}

// Removes using a password as a login method
func (c *Client) RemovePasswordAuth(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewRemovePasswordAuthRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewRemovePasswordAuthRequest create the request corresponding to the remove action endpoint of the password-auth resource.
func (c *Client) NewRemovePasswordAuthRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ResetPasswordAuthPath computes a request path to the reset action of password-auth.
func ResetPasswordAuthPath() string {

	return fmt.Sprintf("/api/v1/user/auth/reset-password")
}

// Send an email to user to get a password reset, responds with no content even if the email is not on any user account
func (c *Client) ResetPasswordAuth(ctx context.Context, path string, email string, redirectURL string) (*http.Response, error) {
	req, err := c.NewResetPasswordAuthRequest(ctx, path, email, redirectURL)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewResetPasswordAuthRequest create the request corresponding to the reset action endpoint of the password-auth resource.
func (c *Client) NewResetPasswordAuthRequest(ctx context.Context, path string, email string, redirectURL string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	values.Set("email", email)
	values.Set("redirect-url", redirectURL)
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.KeySigner != nil {
		if err := c.KeySigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}
