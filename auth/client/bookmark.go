// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "user": bookmark Resource Client
//
// Command:
// $ goagen
// --design=gigglesearch.org/giggle-auth/auth/design
// --out=$(GOPATH)/src/gigglesearch.org/giggle-auth/auth
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// AddPostBookmarkPath computes a request path to the addPost action of bookmark.
func AddPostBookmarkPath() string {

	return fmt.Sprintf("/api/v1/user/bookmark/post")
}

// add a post to bookmarks
func (c *Client) AddPostBookmark(ctx context.Context, path string, payload *BookmarkParams, contentType string) (*http.Response, error) {
	req, err := c.NewAddPostBookmarkRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewAddPostBookmarkRequest create the request corresponding to the addPost action endpoint of the bookmark resource.
func (c *Client) NewAddPostBookmarkRequest(ctx context.Context, path string, payload *BookmarkParams, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// AddVideoBookmarkPath computes a request path to the addVideo action of bookmark.
func AddVideoBookmarkPath() string {

	return fmt.Sprintf("/api/v1/user/bookmark/video")
}

// add a video to bookmarks
func (c *Client) AddVideoBookmark(ctx context.Context, path string, payload *BookmarkParams, contentType string) (*http.Response, error) {
	req, err := c.NewAddVideoBookmarkRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewAddVideoBookmarkRequest create the request corresponding to the addVideo action endpoint of the bookmark resource.
func (c *Client) NewAddVideoBookmarkRequest(ctx context.Context, path string, payload *BookmarkParams, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// GetBookmarksBookmarkPath computes a request path to the getBookmarks action of bookmark.
func GetBookmarksBookmarkPath() string {

	return fmt.Sprintf("/api/v1/user/bookmark")
}

// get all bookmarks
func (c *Client) GetBookmarksBookmark(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewGetBookmarksBookmarkRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewGetBookmarksBookmarkRequest create the request corresponding to the getBookmarks action endpoint of the bookmark resource.
func (c *Client) NewGetBookmarksBookmarkRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// GetPostBookmarksBookmarkPath computes a request path to the getPostBookmarks action of bookmark.
func GetPostBookmarksBookmarkPath() string {

	return fmt.Sprintf("/api/v1/user/bookmark/post")
}

// get all post bookmarks
func (c *Client) GetPostBookmarksBookmark(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewGetPostBookmarksBookmarkRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewGetPostBookmarksBookmarkRequest create the request corresponding to the getPostBookmarks action endpoint of the bookmark resource.
func (c *Client) NewGetPostBookmarksBookmarkRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// GetVideoBookmarksBookmarkPath computes a request path to the getVideoBookmarks action of bookmark.
func GetVideoBookmarksBookmarkPath() string {

	return fmt.Sprintf("/api/v1/user/bookmark/video")
}

// get all video bookmarks
func (c *Client) GetVideoBookmarksBookmark(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewGetVideoBookmarksBookmarkRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewGetVideoBookmarksBookmarkRequest create the request corresponding to the getVideoBookmarks action endpoint of the bookmark resource.
func (c *Client) NewGetVideoBookmarksBookmarkRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// RemoveFromBookmarkBookmarkPath computes a request path to the removeFromBookmark action of bookmark.
func RemoveFromBookmarkBookmarkPath() string {

	return fmt.Sprintf("/api/v1/user/bookmark")
}

// remove a post or video from bookmarks
func (c *Client) RemoveFromBookmarkBookmark(ctx context.Context, path string, id *string) (*http.Response, error) {
	req, err := c.NewRemoveFromBookmarkBookmarkRequest(ctx, path, id)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewRemoveFromBookmarkBookmarkRequest create the request corresponding to the removeFromBookmark action endpoint of the bookmark resource.
func (c *Client) NewRemoveFromBookmarkBookmarkRequest(ctx context.Context, path string, id *string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if id != nil {
		values.Set("id", *id)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}
