// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "user": CLI Commands
//
// Command:
// $ goagen
// --design=gigglesearch.org/giggle-auth/auth/design
// --out=$(GOPATH)/src/gigglesearch.org/giggle-auth/auth
// --version=v1.3.1

package cli

import (
	"context"
	"encoding/json"
	"fmt"
	"gigglesearch.org/giggle-auth/auth/client"
	"github.com/goadesign/goa"
	goaclient "github.com/goadesign/goa/client"
	uuid "github.com/goadesign/goa/uuid"
	"github.com/spf13/cobra"
	"log"
	"net/url"
	"os"
	"strconv"
	"strings"
	"time"
)

type (
	// AttachToAccountAmazonCommand is the command line data structure for the attach-to-account action of amazon
	AttachToAccountAmazonCommand struct {
		PrettyPrint bool
	}

	// DetachFromAccountAmazonCommand is the command line data structure for the detach-from-account action of amazon
	DetachFromAccountAmazonCommand struct {
		PrettyPrint bool
	}

	// LoginAmazonCommand is the command line data structure for the login action of amazon
	LoginAmazonCommand struct {
		// A merge token for merging into an account
		Token       string
		PrettyPrint bool
	}

	// ReceiveAmazonCommand is the command line data structure for the receive action of amazon
	ReceiveAmazonCommand struct {
		Code        string
		State       string
		PrettyPrint bool
	}

	// RegisterAmazonCommand is the command line data structure for the register action of amazon
	RegisterAmazonCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// RegisterURLAmazonCommand is the command line data structure for the register-url action of amazon
	RegisterURLAmazonCommand struct {
		PrettyPrint bool
	}

	// AddPostBookmarkCommand is the command line data structure for the addPost action of bookmark
	AddPostBookmarkCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// AddVideoBookmarkCommand is the command line data structure for the addVideo action of bookmark
	AddVideoBookmarkCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// GetBookmarksBookmarkCommand is the command line data structure for the getBookmarks action of bookmark
	GetBookmarksBookmarkCommand struct {
		PrettyPrint bool
	}

	// GetPostBookmarksBookmarkCommand is the command line data structure for the getPostBookmarks action of bookmark
	GetPostBookmarksBookmarkCommand struct {
		PrettyPrint bool
	}

	// GetVideoBookmarksBookmarkCommand is the command line data structure for the getVideoBookmarks action of bookmark
	GetVideoBookmarksBookmarkCommand struct {
		PrettyPrint bool
	}

	// RemoveFromBookmarkBookmarkCommand is the command line data structure for the removeFromBookmark action of bookmark
	RemoveFromBookmarkBookmarkCommand struct {
		// ID of the resource to be deleted
		ID          string
		PrettyPrint bool
	}

	// AttachToAccountFacebookCommand is the command line data structure for the attach-to-account action of facebook
	AttachToAccountFacebookCommand struct {
		PrettyPrint bool
	}

	// DetachFromAccountFacebookCommand is the command line data structure for the detach-from-account action of facebook
	DetachFromAccountFacebookCommand struct {
		PrettyPrint bool
	}

	// LoginFacebookCommand is the command line data structure for the login action of facebook
	LoginFacebookCommand struct {
		// A merge token for merging into an account
		Token       string
		PrettyPrint bool
	}

	// ReceiveFacebookCommand is the command line data structure for the receive action of facebook
	ReceiveFacebookCommand struct {
		Code        string
		State       string
		PrettyPrint bool
	}

	// RegisterFacebookCommand is the command line data structure for the register action of facebook
	RegisterFacebookCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// RegisterURLFacebookCommand is the command line data structure for the register-url action of facebook
	RegisterURLFacebookCommand struct {
		PrettyPrint bool
	}

	// AttachToAccountGoogleCommand is the command line data structure for the attach-to-account action of google
	AttachToAccountGoogleCommand struct {
		PrettyPrint bool
	}

	// DetachFromAccountGoogleCommand is the command line data structure for the detach-from-account action of google
	DetachFromAccountGoogleCommand struct {
		PrettyPrint bool
	}

	// LoginGoogleCommand is the command line data structure for the login action of google
	LoginGoogleCommand struct {
		// A merge token for merging into an account
		Token       string
		PrettyPrint bool
	}

	// ReceiveGoogleCommand is the command line data structure for the receive action of google
	ReceiveGoogleCommand struct {
		Code        string
		State       string
		PrettyPrint bool
	}

	// RegisterGoogleCommand is the command line data structure for the register action of google
	RegisterGoogleCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// RegisterURLGoogleCommand is the command line data structure for the register-url action of google
	RegisterURLGoogleCommand struct {
		PrettyPrint bool
	}

	// AttachToAccountLinkedinCommand is the command line data structure for the attach-to-account action of linkedin
	AttachToAccountLinkedinCommand struct {
		PrettyPrint bool
	}

	// DetachFromAccountLinkedinCommand is the command line data structure for the detach-from-account action of linkedin
	DetachFromAccountLinkedinCommand struct {
		PrettyPrint bool
	}

	// LoginLinkedinCommand is the command line data structure for the login action of linkedin
	LoginLinkedinCommand struct {
		// A merge token for merging into an account
		Token       string
		PrettyPrint bool
	}

	// ReceiveLinkedinCommand is the command line data structure for the receive action of linkedin
	ReceiveLinkedinCommand struct {
		Code        string
		State       string
		PrettyPrint bool
	}

	// RegisterLinkedinCommand is the command line data structure for the register action of linkedin
	RegisterLinkedinCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// RegisterURLLinkedinCommand is the command line data structure for the register-url action of linkedin
	RegisterURLLinkedinCommand struct {
		PrettyPrint bool
	}

	// AttachToAccountMicrosoftCommand is the command line data structure for the attach-to-account action of microsoft
	AttachToAccountMicrosoftCommand struct {
		PrettyPrint bool
	}

	// DetachFromAccountMicrosoftCommand is the command line data structure for the detach-from-account action of microsoft
	DetachFromAccountMicrosoftCommand struct {
		PrettyPrint bool
	}

	// LoginMicrosoftCommand is the command line data structure for the login action of microsoft
	LoginMicrosoftCommand struct {
		// A merge token for merging into an account
		Token       string
		PrettyPrint bool
	}

	// ReceiveMicrosoftCommand is the command line data structure for the receive action of microsoft
	ReceiveMicrosoftCommand struct {
		Code        string
		State       string
		PrettyPrint bool
	}

	// RegisterMicrosoftCommand is the command line data structure for the register action of microsoft
	RegisterMicrosoftCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// RegisterURLMicrosoftCommand is the command line data structure for the register-url action of microsoft
	RegisterURLMicrosoftCommand struct {
		PrettyPrint bool
	}

	// AddSubscriberNewsletterCommand is the command line data structure for the add-subscriber action of newsletter
	AddSubscriberNewsletterCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// GetSubscriberByEmailNewsletterCommand is the command line data structure for the get-subscriber-by-email action of newsletter
	GetSubscriberByEmailNewsletterCommand struct {
		Email       string
		PrettyPrint bool
	}

	// GetSubscribersNewsletterCommand is the command line data structure for the get-subscribers action of newsletter
	GetSubscribersNewsletterCommand struct {
		PrettyPrint bool
	}

	// RemoveSubscriberNewsletterCommand is the command line data structure for the remove-subscriber action of newsletter
	RemoveSubscriberNewsletterCommand struct {
		Email       string
		PrettyPrint bool
	}

	// UpdateSubscriberNewsletterCommand is the command line data structure for the update-subscriber action of newsletter
	UpdateSubscriberNewsletterCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// ChangePasswordPasswordAuthCommand is the command line data structure for the change-password action of password-auth
	ChangePasswordPasswordAuthCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// ConfirmResetPasswordAuthCommand is the command line data structure for the confirm-reset action of password-auth
	ConfirmResetPasswordAuthCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// LoginPasswordAuthCommand is the command line data structure for the login action of password-auth
	LoginPasswordAuthCommand struct {
		Payload     string
		ContentType string
		// A merge token for merging into an account
		Token       string
		PrettyPrint bool
	}

	// RegisterPasswordAuthCommand is the command line data structure for the register action of password-auth
	RegisterPasswordAuthCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// RemovePasswordAuthCommand is the command line data structure for the remove action of password-auth
	RemovePasswordAuthCommand struct {
		PrettyPrint bool
	}

	// ResetPasswordAuthCommand is the command line data structure for the reset action of password-auth
	ResetPasswordAuthCommand struct {
		// Email of the account to send a password reset
		Email string
		// URL to redirect to from the user's email link
		RedirectURL string
		PrettyPrint bool
	}

	// CleanLoginTokenSessionCommand is the command line data structure for the clean-login-token action of session
	CleanLoginTokenSessionCommand struct {
		PrettyPrint bool
	}

	// CleanMergeTokenSessionCommand is the command line data structure for the clean-merge-token action of session
	CleanMergeTokenSessionCommand struct {
		PrettyPrint bool
	}

	// CleanSessionsSessionCommand is the command line data structure for the clean-sessions action of session
	CleanSessionsSessionCommand struct {
		PrettyPrint bool
	}

	// GetSessionsSessionCommand is the command line data structure for the get-sessions action of session
	GetSessionsSessionCommand struct {
		PrettyPrint bool
	}

	// LogoutSessionCommand is the command line data structure for the logout action of session
	LogoutSessionCommand struct {
		PrettyPrint bool
	}

	// LogoutOtherSessionCommand is the command line data structure for the logout-other action of session
	LogoutOtherSessionCommand struct {
		PrettyPrint bool
	}

	// LogoutSpecificSessionCommand is the command line data structure for the logout-specific action of session
	LogoutSpecificSessionCommand struct {
		Session     string
		SessionID   string
		PrettyPrint bool
	}

	// RedeemTokenSessionCommand is the command line data structure for the redeemToken action of session
	RedeemTokenSessionCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// RefreshSessionCommand is the command line data structure for the refresh action of session
	RefreshSessionCommand struct {
		XSession    string
		PrettyPrint bool
	}

	// AttachToAccountTwitterCommand is the command line data structure for the attach-to-account action of twitter
	AttachToAccountTwitterCommand struct {
		PrettyPrint bool
	}

	// DetachFromAccountTwitterCommand is the command line data structure for the detach-from-account action of twitter
	DetachFromAccountTwitterCommand struct {
		PrettyPrint bool
	}

	// LoginTwitterCommand is the command line data structure for the login action of twitter
	LoginTwitterCommand struct {
		// A merge token for merging into an account
		Token       string
		PrettyPrint bool
	}

	// ReceiveTwitterCommand is the command line data structure for the receive action of twitter
	ReceiveTwitterCommand struct {
		OauthToken    string
		OauthVerifier string
		State         string
		PrettyPrint   bool
	}

	// RegisterTwitterCommand is the command line data structure for the register action of twitter
	RegisterTwitterCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// RegisterURLTwitterCommand is the command line data structure for the register-url action of twitter
	RegisterURLTwitterCommand struct {
		PrettyPrint bool
	}

	// AddPluginUserCommand is the command line data structure for the add-plugin action of user
	AddPluginUserCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// DeactivateUserCommand is the command line data structure for the deactivate action of user
	DeactivateUserCommand struct {
		// whether admin is requesting this deactivation
		Admin string
		// id of the user to be deactivated when admin is deactivating a user
		ID          string
		PrettyPrint bool
	}

	// GetAllUsersUserCommand is the command line data structure for the get-all-users action of user
	GetAllUsersUserCommand struct {
		PrettyPrint bool
	}

	// GetByEmailUserCommand is the command line data structure for the get-by-email action of user
	GetByEmailUserCommand struct {
		// The email of the requested user.
		Email       string
		PrettyPrint bool
	}

	// GetManyUserCommand is the command line data structure for the get-many action of user
	GetManyUserCommand struct {
		// Unique unchanging user ID
		ID          []string
		PrettyPrint bool
	}

	// GetAuthsUserCommand is the command line data structure for the getAuths action of user
	GetAuthsUserCommand struct {
		// The ID of the requested user. If this is not provide, get currently logged in user
		UserID      string
		PrettyPrint bool
	}

	// ResendVerifyEmailUserCommand is the command line data structure for the resend-verify-email action of user
	ResendVerifyEmailUserCommand struct {
		PrettyPrint bool
	}

	// RetrieveUserCommand is the command line data structure for the retrieve action of user
	RetrieveUserCommand struct {
		// The ID of the requested user. If this is not provided, get currently logged in user
		UserID      string
		PrettyPrint bool
	}

	// UpdateUserCommand is the command line data structure for the update action of user
	UpdateUserCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// UpdateAdminUserCommand is the command line data structure for the update-admin action of user
	UpdateAdminUserCommand struct {
		Payload     string
		ContentType string
		// user id to be modified
		UID         string
		PrettyPrint bool
	}

	// UpdatePluginPermissionsUserCommand is the command line data structure for the update-plugin-permissions action of user
	UpdatePluginPermissionsUserCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// ValidateEmailUserCommand is the command line data structure for the validate-email action of user
	ValidateEmailUserCommand struct {
		// The ID of the validation to be confirmed
		ValidateID  string
		PrettyPrint bool
	}
)

// RegisterCommands registers the resource action CLI commands.
func RegisterCommands(app *cobra.Command, c *client.Client) {
	var command, sub *cobra.Command
	command = &cobra.Command{
		Use:   "add-plugin",
		Short: `Add a new plugin to user's account`,
	}
	tmp1 := new(AddPluginUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/api/v1/user/user/plugins"]`,
		Short: ``,
		Long: `

Payload example:

{
   "permissionsAllowed": [
      "Doloribus quis fugiat officia exercitationem.",
      "Doloribus quis fugiat officia exercitationem.",
      "Doloribus quis fugiat officia exercitationem."
   ],
   "pluginID": "Aperiam non voluptatem et non dicta et."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp1.Run(c, args) },
	}
	tmp1.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp1.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "add-post",
		Short: `add a post to bookmarks`,
	}
	tmp2 := new(AddPostBookmarkCommand)
	sub = &cobra.Command{
		Use:   `bookmark ["/api/v1/user/bookmark/post"]`,
		Short: ``,
		Long: `

Payload example:

{
   "category": "Consequatur accusantium occaecati sint harum ipsam.",
   "description": "Vitae sed aut explicabo.",
   "id": "Ut ipsam corrupti suscipit aliquid explicabo.",
   "title": "Et maxime explicabo natus.",
   "type": "Pariatur et inventore ex inventore."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp2.Run(c, args) },
	}
	tmp2.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp2.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "add-subscriber",
		Short: `Add a new newsletter subscriber`,
	}
	tmp3 := new(AddSubscriberNewsletterCommand)
	sub = &cobra.Command{
		Use:   `newsletter ["/api/v1/user/newsletter"]`,
		Short: ``,
		Long: `

Payload example:

{
   "email": "kari.bartoletti@goyette.info",
   "isActive": false,
   "subscribedAt": "2008-09-12T01:02:28Z"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp3.Run(c, args) },
	}
	tmp3.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp3.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "add-video",
		Short: `add a video to bookmarks`,
	}
	tmp4 := new(AddVideoBookmarkCommand)
	sub = &cobra.Command{
		Use:   `bookmark ["/api/v1/user/bookmark/video"]`,
		Short: ``,
		Long: `

Payload example:

{
   "category": "Consequatur accusantium occaecati sint harum ipsam.",
   "description": "Vitae sed aut explicabo.",
   "id": "Ut ipsam corrupti suscipit aliquid explicabo.",
   "title": "Et maxime explicabo natus.",
   "type": "Pariatur et inventore ex inventore."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp4.Run(c, args) },
	}
	tmp4.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp4.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "attach-to-account",
		Short: `attachToAccount action`,
	}
	tmp5 := new(AttachToAccountAmazonCommand)
	sub = &cobra.Command{
		Use:   `amazon ["/api/v1/user/auth/amazon/attach"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp5.Run(c, args) },
	}
	tmp5.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp5.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp6 := new(AttachToAccountFacebookCommand)
	sub = &cobra.Command{
		Use:   `facebook ["/api/v1/user/auth/facebook/attach"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp6.Run(c, args) },
	}
	tmp6.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp6.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp7 := new(AttachToAccountGoogleCommand)
	sub = &cobra.Command{
		Use:   `google ["/api/v1/user/auth/google/attach"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp7.Run(c, args) },
	}
	tmp7.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp7.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp8 := new(AttachToAccountLinkedinCommand)
	sub = &cobra.Command{
		Use:   `linkedin ["/api/v1/user/auth/linkedin/attach"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp8.Run(c, args) },
	}
	tmp8.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp8.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp9 := new(AttachToAccountMicrosoftCommand)
	sub = &cobra.Command{
		Use:   `microsoft ["/api/v1/user/auth/microsoft/attach"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp9.Run(c, args) },
	}
	tmp9.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp9.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp10 := new(AttachToAccountTwitterCommand)
	sub = &cobra.Command{
		Use:   `twitter ["/api/v1/user/auth/twitter/attach"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp10.Run(c, args) },
	}
	tmp10.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp10.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "change-password",
		Short: `Changes the user's current password to a new one, also adds a password to the account if there is none`,
	}
	tmp11 := new(ChangePasswordPasswordAuthCommand)
	sub = &cobra.Command{
		Use:   `password-auth ["/api/v1/user/auth/change-password"]`,
		Short: ``,
		Long: `

Payload example:

{
   "newPassword": "6s51f1mdr",
   "oldPassword": "5qjvgd550o"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp11.Run(c, args) },
	}
	tmp11.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp11.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "clean-login-token",
		Short: `Cleans old login tokens from the database`,
	}
	tmp12 := new(CleanLoginTokenSessionCommand)
	sub = &cobra.Command{
		Use:   `session ["/api/v1/user/auth/clean/token/login"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp12.Run(c, args) },
	}
	tmp12.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp12.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "clean-merge-token",
		Short: `Cleans old account merge tokens from the database`,
	}
	tmp13 := new(CleanMergeTokenSessionCommand)
	sub = &cobra.Command{
		Use:   `session ["/api/v1/user/auth/clean/token/merge"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp13.Run(c, args) },
	}
	tmp13.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp13.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "clean-sessions",
		Short: `Deletes all the sessions that have expired`,
	}
	tmp14 := new(CleanSessionsSessionCommand)
	sub = &cobra.Command{
		Use:   `session ["/api/v1/user/auth/clean/sessions"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp14.Run(c, args) },
	}
	tmp14.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp14.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "confirm-reset",
		Short: `Confirms that a reset has been completed and changes the password to the new one passed in`,
	}
	tmp15 := new(ConfirmResetPasswordAuthCommand)
	sub = &cobra.Command{
		Use:   `password-auth ["/api/v1/user/auth/finalize-reset"]`,
		Short: ``,
		Long: `

Payload example:

{
   "newPassword": "854x22",
   "resetCode": "Qui cupiditate rerum.",
   "userID": "Et et perspiciatis."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp15.Run(c, args) },
	}
	tmp15.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp15.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "deactivate",
		Short: `Disable a user's account`,
	}
	tmp16 := new(DeactivateUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/api/v1/user/user"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp16.Run(c, args) },
	}
	tmp16.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp16.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "detach-from-account",
		Short: `detachFromAccount action`,
	}
	tmp17 := new(DetachFromAccountAmazonCommand)
	sub = &cobra.Command{
		Use:   `amazon ["/api/v1/user/auth/amazon/detach"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp17.Run(c, args) },
	}
	tmp17.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp17.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp18 := new(DetachFromAccountFacebookCommand)
	sub = &cobra.Command{
		Use:   `facebook ["/api/v1/user/auth/facebook/detach"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp18.Run(c, args) },
	}
	tmp18.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp18.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp19 := new(DetachFromAccountGoogleCommand)
	sub = &cobra.Command{
		Use:   `google ["/api/v1/user/auth/google/detach"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp19.Run(c, args) },
	}
	tmp19.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp19.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp20 := new(DetachFromAccountLinkedinCommand)
	sub = &cobra.Command{
		Use:   `linkedin ["/api/v1/user/auth/linkedin/detach"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp20.Run(c, args) },
	}
	tmp20.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp20.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp21 := new(DetachFromAccountMicrosoftCommand)
	sub = &cobra.Command{
		Use:   `microsoft ["/api/v1/user/auth/microsoft/detach"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp21.Run(c, args) },
	}
	tmp21.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp21.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp22 := new(DetachFromAccountTwitterCommand)
	sub = &cobra.Command{
		Use:   `twitter ["/api/v1/user/auth/twitter/detach"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp22.Run(c, args) },
	}
	tmp22.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp22.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "get-all-users",
		Short: `Get all users`,
	}
	tmp23 := new(GetAllUsersUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/api/v1/user/user/all"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp23.Run(c, args) },
	}
	tmp23.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp23.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "get-auths",
		Short: `Returns whether Oauth is attached or not`,
	}
	tmp24 := new(GetAuthsUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/api/v1/user/user/authstat"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp24.Run(c, args) },
	}
	tmp24.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp24.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "get-bookmarks",
		Short: `get all bookmarks`,
	}
	tmp25 := new(GetBookmarksBookmarkCommand)
	sub = &cobra.Command{
		Use:   `bookmark ["/api/v1/user/bookmark"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp25.Run(c, args) },
	}
	tmp25.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp25.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "get-by-email",
		Short: `Get a user by their email. Only callable by admins`,
	}
	tmp26 := new(GetByEmailUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/api/v1/user/user/email"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp26.Run(c, args) },
	}
	tmp26.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp26.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "get-many",
		Short: `Get many users by their ID`,
	}
	tmp27 := new(GetManyUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/api/v1/user/user/multi"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp27.Run(c, args) },
	}
	tmp27.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp27.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "get-post-bookmarks",
		Short: `get all post bookmarks`,
	}
	tmp28 := new(GetPostBookmarksBookmarkCommand)
	sub = &cobra.Command{
		Use:   `bookmark ["/api/v1/user/bookmark/post"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp28.Run(c, args) },
	}
	tmp28.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp28.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "get-sessions",
		Short: `Gets all of the sessions that are associated with the currently logged in user`,
	}
	tmp29 := new(GetSessionsSessionCommand)
	sub = &cobra.Command{
		Use:   `session ["/api/v1/user/auth/sessions"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp29.Run(c, args) },
	}
	tmp29.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp29.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "get-subscriber-by-email",
		Short: `Get a Subscriber using their email`,
	}
	tmp30 := new(GetSubscriberByEmailNewsletterCommand)
	sub = &cobra.Command{
		Use:   `newsletter ["/api/v1/user/newsletter"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp30.Run(c, args) },
	}
	tmp30.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp30.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "get-subscribers",
		Short: `Get All Subscribers`,
	}
	tmp31 := new(GetSubscribersNewsletterCommand)
	sub = &cobra.Command{
		Use:   `newsletter ["/api/v1/user/newsletter/all"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp31.Run(c, args) },
	}
	tmp31.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp31.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "get-video-bookmarks",
		Short: `get all video bookmarks`,
	}
	tmp32 := new(GetVideoBookmarksBookmarkCommand)
	sub = &cobra.Command{
		Use:   `bookmark ["/api/v1/user/bookmark/video"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp32.Run(c, args) },
	}
	tmp32.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp32.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "login",
		Short: `login action`,
	}
	tmp33 := new(LoginAmazonCommand)
	sub = &cobra.Command{
		Use:   `amazon ["/api/v1/user/auth/amazon/login"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp33.Run(c, args) },
	}
	tmp33.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp33.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp34 := new(LoginFacebookCommand)
	sub = &cobra.Command{
		Use:   `facebook ["/api/v1/user/auth/facebook/login"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp34.Run(c, args) },
	}
	tmp34.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp34.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp35 := new(LoginGoogleCommand)
	sub = &cobra.Command{
		Use:   `google ["/api/v1/user/auth/google/login"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp35.Run(c, args) },
	}
	tmp35.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp35.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp36 := new(LoginLinkedinCommand)
	sub = &cobra.Command{
		Use:   `linkedin ["/api/v1/user/auth/linkedin/login"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp36.Run(c, args) },
	}
	tmp36.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp36.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp37 := new(LoginMicrosoftCommand)
	sub = &cobra.Command{
		Use:   `microsoft ["/api/v1/user/auth/microsoft/login"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp37.Run(c, args) },
	}
	tmp37.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp37.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp38 := new(LoginPasswordAuthCommand)
	sub = &cobra.Command{
		Use:   `password-auth ["/api/v1/user/auth/login"]`,
		Short: ``,
		Long: `

Payload example:

{
   "TwoFactor": "j0ckq1v",
   "email": "soledad_harvey@rice.name",
   "password": "7vqw047u"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp38.Run(c, args) },
	}
	tmp38.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp38.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp39 := new(LoginTwitterCommand)
	sub = &cobra.Command{
		Use:   `twitter ["/api/v1/user/auth/twitter/login"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp39.Run(c, args) },
	}
	tmp39.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp39.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "logout",
		Short: `Takes a user's auth token, and logs-out the session associated with it`,
	}
	tmp40 := new(LogoutSessionCommand)
	sub = &cobra.Command{
		Use:   `session ["/api/v1/user/auth/logout"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp40.Run(c, args) },
	}
	tmp40.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp40.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "logout-other",
		Short: `Logout all sessions for the current user except their current session`,
	}
	tmp41 := new(LogoutOtherSessionCommand)
	sub = &cobra.Command{
		Use:   `session ["/api/v1/user/auth/logout/all"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp41.Run(c, args) },
	}
	tmp41.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp41.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "logout-specific",
		Short: `Logout of a specific session`,
	}
	tmp42 := new(LogoutSpecificSessionCommand)
	sub = &cobra.Command{
		Use:   `session ["/api/v1/user/auth/logout/SESSION-id"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp42.Run(c, args) },
	}
	tmp42.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp42.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "receive",
		Short: `receive action`,
	}
	tmp43 := new(ReceiveAmazonCommand)
	sub = &cobra.Command{
		Use:   `amazon ["/api/v1/user/auth/amazon/receive"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp43.Run(c, args) },
	}
	tmp43.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp43.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp44 := new(ReceiveFacebookCommand)
	sub = &cobra.Command{
		Use:   `facebook ["/api/v1/user/auth/facebook/receive"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp44.Run(c, args) },
	}
	tmp44.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp44.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp45 := new(ReceiveGoogleCommand)
	sub = &cobra.Command{
		Use:   `google ["/api/v1/user/auth/google/receive"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp45.Run(c, args) },
	}
	tmp45.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp45.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp46 := new(ReceiveLinkedinCommand)
	sub = &cobra.Command{
		Use:   `linkedin ["/api/v1/user/auth/linkedin/receive"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp46.Run(c, args) },
	}
	tmp46.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp46.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp47 := new(ReceiveMicrosoftCommand)
	sub = &cobra.Command{
		Use:   `microsoft ["/api/v1/user/auth/microsoft/receive"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp47.Run(c, args) },
	}
	tmp47.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp47.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp48 := new(ReceiveTwitterCommand)
	sub = &cobra.Command{
		Use:   `twitter ["/api/v1/user/auth/twitter/receive"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp48.Run(c, args) },
	}
	tmp48.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp48.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "redeem-token",
		Short: `Redeems a login token for credentials`,
	}
	tmp49 := new(RedeemTokenSessionCommand)
	sub = &cobra.Command{
		Use:   `session ["/api/v1/user/auth/token"]`,
		Short: ``,
		Long: `

Payload example:

{
   "token": "28e74b6f-e8d2-4d26-ac22-7d4ab727dc14"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp49.Run(c, args) },
	}
	tmp49.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp49.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "refresh",
		Short: `Take a user's session token and refresh it, also returns a new authentication token`,
	}
	tmp50 := new(RefreshSessionCommand)
	sub = &cobra.Command{
		Use:   `session ["/api/v1/user/auth/session"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp50.Run(c, args) },
	}
	tmp50.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp50.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "register",
		Short: `register action`,
	}
	tmp51 := new(RegisterAmazonCommand)
	sub = &cobra.Command{
		Use:   `amazon ["/api/v1/user/auth/amazon/register"]`,
		Short: ``,
		Long: `

Payload example:

{
   "email": "annabel_murphy@raynor.net",
   "firstName": "b678tkml",
   "gRecaptchaResponse": "Voluptatem fugiat blanditiis fugit.",
   "lastName": "yo5hn9",
   "oauthKey": "accde887-21fc-4998-aeed-b3b92466a9e8"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp51.Run(c, args) },
	}
	tmp51.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp51.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp52 := new(RegisterFacebookCommand)
	sub = &cobra.Command{
		Use:   `facebook ["/api/v1/user/auth/facebook/register"]`,
		Short: ``,
		Long: `

Payload example:

{
   "email": "corbin@medhurst.biz",
   "firstName": "5mvq",
   "gRecaptchaResponse": "Aut aut.",
   "lastName": "3lp",
   "oauthKey": "1c22d3e9-5566-47f6-b076-56bd94c6cbe8"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp52.Run(c, args) },
	}
	tmp52.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp52.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp53 := new(RegisterGoogleCommand)
	sub = &cobra.Command{
		Use:   `google ["/api/v1/user/auth/google/register"]`,
		Short: ``,
		Long: `

Payload example:

{
   "email": "marques@spinka.org",
   "firstName": "1fj2uc8vip",
   "gRecaptchaResponse": "Doloremque id illo culpa facere vel.",
   "lastName": "y9m9wo",
   "oauthKey": "7ccc4692-3a61-4fd1-b9ae-7e70fea9bddc"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp53.Run(c, args) },
	}
	tmp53.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp53.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp54 := new(RegisterLinkedinCommand)
	sub = &cobra.Command{
		Use:   `linkedin ["/api/v1/user/auth/linkedin/register"]`,
		Short: ``,
		Long: `

Payload example:

{
   "email": "tyrique.rippin@berge.info",
   "firstName": "gp",
   "gRecaptchaResponse": "Neque vel.",
   "lastName": "mqyi",
   "oauthKey": "30375e3f-a14d-4443-afb8-e14400d21bda"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp54.Run(c, args) },
	}
	tmp54.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp54.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp55 := new(RegisterMicrosoftCommand)
	sub = &cobra.Command{
		Use:   `microsoft ["/api/v1/user/auth/microsoft/register"]`,
		Short: ``,
		Long: `

Payload example:

{
   "email": "dario.kilback@starkkirlin.name",
   "firstName": "3ci",
   "gRecaptchaResponse": "Veniam doloremque est doloremque sunt doloremque ut.",
   "lastName": "g34dbxb",
   "oauthKey": "b1b1e0ed-2906-485c-bb8a-ac46ec612990"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp55.Run(c, args) },
	}
	tmp55.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp55.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp56 := new(RegisterPasswordAuthCommand)
	sub = &cobra.Command{
		Use:   `password-auth ["/api/v1/user/auth/register"]`,
		Short: ``,
		Long: `

Payload example:

{
   "category": [
      "Optio qui similique voluptatibus debitis.",
      "Optio qui similique voluptatibus debitis.",
      "Optio qui similique voluptatibus debitis."
   ],
   "email": "velva@fritschritchie.name",
   "firstName": "t9gsas",
   "gRecaptchaResponse": "Odio repudiandae.",
   "lastName": "mln9dwqsoi",
   "password": "w6zecodyel"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp56.Run(c, args) },
	}
	tmp56.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp56.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp57 := new(RegisterTwitterCommand)
	sub = &cobra.Command{
		Use:   `twitter ["/api/v1/user/auth/twitter/register"]`,
		Short: ``,
		Long: `

Payload example:

{
   "email": "janice.bauch@hahnstrosin.org",
   "firstName": "yih9jmtxcl",
   "gRecaptchaResponse": "Eligendi eum aut et velit odio.",
   "lastName": "cbwgwfcwg",
   "oauthKey": "85a8f35d-3110-445e-b84a-47134b563ef6"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp57.Run(c, args) },
	}
	tmp57.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp57.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "registerurl",
		Short: `registerURL action`,
	}
	tmp58 := new(RegisterURLAmazonCommand)
	sub = &cobra.Command{
		Use:   `amazon ["/api/v1/user/auth/amazon/register-start"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp58.Run(c, args) },
	}
	tmp58.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp58.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp59 := new(RegisterURLFacebookCommand)
	sub = &cobra.Command{
		Use:   `facebook ["/api/v1/user/auth/facebook/register-start"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp59.Run(c, args) },
	}
	tmp59.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp59.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp60 := new(RegisterURLGoogleCommand)
	sub = &cobra.Command{
		Use:   `google ["/api/v1/user/auth/google/register-start"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp60.Run(c, args) },
	}
	tmp60.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp60.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp61 := new(RegisterURLLinkedinCommand)
	sub = &cobra.Command{
		Use:   `linkedin ["/api/v1/user/auth/linkedin/register-start"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp61.Run(c, args) },
	}
	tmp61.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp61.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp62 := new(RegisterURLMicrosoftCommand)
	sub = &cobra.Command{
		Use:   `microsoft ["/api/v1/user/auth/microsoft/register-start"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp62.Run(c, args) },
	}
	tmp62.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp62.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp63 := new(RegisterURLTwitterCommand)
	sub = &cobra.Command{
		Use:   `twitter ["/api/v1/user/auth/twitter/register-start"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp63.Run(c, args) },
	}
	tmp63.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp63.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "remove",
		Short: `Removes using a password as a login method`,
	}
	tmp64 := new(RemovePasswordAuthCommand)
	sub = &cobra.Command{
		Use:   `password-auth ["/api/v1/user/auth/remove-password"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp64.Run(c, args) },
	}
	tmp64.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp64.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "remove-from-bookmark",
		Short: `remove a post or video from bookmarks`,
	}
	tmp65 := new(RemoveFromBookmarkBookmarkCommand)
	sub = &cobra.Command{
		Use:   `bookmark ["/api/v1/user/bookmark"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp65.Run(c, args) },
	}
	tmp65.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp65.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "remove-subscriber",
		Short: `Remove a newsletter subscriber`,
	}
	tmp66 := new(RemoveSubscriberNewsletterCommand)
	sub = &cobra.Command{
		Use:   `newsletter ["/api/v1/user/newsletter"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp66.Run(c, args) },
	}
	tmp66.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp66.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "resend-verify-email",
		Short: `Resends a verify email for the current user, also invalidates the link on the previously send email verification`,
	}
	tmp67 := new(ResendVerifyEmailUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/api/v1/user/user/resend-verify"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp67.Run(c, args) },
	}
	tmp67.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp67.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "reset",
		Short: `Send an email to user to get a password reset, responds with no content even if the email is not on any user account`,
	}
	tmp68 := new(ResetPasswordAuthCommand)
	sub = &cobra.Command{
		Use:   `password-auth ["/api/v1/user/auth/reset-password"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp68.Run(c, args) },
	}
	tmp68.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp68.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "retrieve",
		Short: `Get user by ID`,
	}
	tmp69 := new(RetrieveUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/api/v1/user/user"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp69.Run(c, args) },
	}
	tmp69.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp69.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "update",
		Short: `Update a user`,
	}
	tmp70 := new(UpdateUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/api/v1/user/user"]`,
		Short: ``,
		Long: `

Payload example:

{
   "category": [
      "Sequi cumque consequuntur natus assumenda aut.",
      "Sequi cumque consequuntur natus assumenda aut."
   ],
   "email": "dorris@balistreri.name",
   "firstName": "Jeff",
   "gender": "Harum animi.",
   "getNewsletter": false,
   "isEventAuthor": true,
   "isPluginAuthor": false,
   "lastName": "Newmann",
   "phone": "Ratione vero aut.",
   "profileImage": "Amet adipisci iusto nam enim deserunt."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp70.Run(c, args) },
	}
	tmp70.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp70.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "update-admin",
		Short: `Update a user from admin dashboard`,
	}
	tmp71 := new(UpdateAdminUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/api/v1/user/user/update-user"]`,
		Short: ``,
		Long: `

Payload example:

{
   "getNewsletter": false,
   "isAdmin": false,
   "isEventAuthor": true,
   "isPluginAuthor": true,
   "verifiedEmail": true
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp71.Run(c, args) },
	}
	tmp71.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp71.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "update-plugin-permissions",
		Short: `Update plugin permissions`,
	}
	tmp72 := new(UpdatePluginPermissionsUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/api/v1/user/user/plugins"]`,
		Short: ``,
		Long: `

Payload example:

{
   "permissionsAllowed": [
      "Doloribus quis fugiat officia exercitationem.",
      "Doloribus quis fugiat officia exercitationem.",
      "Doloribus quis fugiat officia exercitationem."
   ],
   "pluginID": "Aperiam non voluptatem et non dicta et."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp72.Run(c, args) },
	}
	tmp72.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp72.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "update-subscriber",
		Short: `Update a newsletter subscriber`,
	}
	tmp73 := new(UpdateSubscriberNewsletterCommand)
	sub = &cobra.Command{
		Use:   `newsletter ["/api/v1/user/newsletter"]`,
		Short: ``,
		Long: `

Payload example:

{
   "email": "kari.bartoletti@goyette.info",
   "isActive": false,
   "subscribedAt": "2008-09-12T01:02:28Z"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp73.Run(c, args) },
	}
	tmp73.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp73.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "validate-email",
		Short: `Validates an email address, designed to be called by users directly in their browser`,
	}
	tmp74 := new(ValidateEmailUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/verifyemail/VALIDATEID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp74.Run(c, args) },
	}
	tmp74.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp74.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
}

func intFlagVal(name string, parsed int) *int {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func float64FlagVal(name string, parsed float64) *float64 {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func boolFlagVal(name string, parsed bool) *bool {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func stringFlagVal(name string, parsed string) *string {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func hasFlag(name string) bool {
	for _, arg := range os.Args[1:] {
		if strings.HasPrefix(arg, "--"+name) {
			return true
		}
	}
	return false
}

func jsonVal(val string) (*interface{}, error) {
	var t interface{}
	err := json.Unmarshal([]byte(val), &t)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func jsonArray(ins []string) ([]interface{}, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []interface{}
	for _, id := range ins {
		val, err := jsonVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, val)
	}
	return vals, nil
}

func timeVal(val string) (*time.Time, error) {
	t, err := time.Parse(time.RFC3339, val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func timeArray(ins []string) ([]time.Time, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []time.Time
	for _, id := range ins {
		val, err := timeVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func uuidVal(val string) (*uuid.UUID, error) {
	t, err := uuid.FromString(val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func uuidArray(ins []string) ([]uuid.UUID, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []uuid.UUID
	for _, id := range ins {
		val, err := uuidVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func float64Val(val string) (*float64, error) {
	t, err := strconv.ParseFloat(val, 64)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func float64Array(ins []string) ([]float64, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []float64
	for _, id := range ins {
		val, err := float64Val(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func boolVal(val string) (*bool, error) {
	t, err := strconv.ParseBool(val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func boolArray(ins []string) ([]bool, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []bool
	for _, id := range ins {
		val, err := boolVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

// Run makes the HTTP request corresponding to the AttachToAccountAmazonCommand command.
func (cmd *AttachToAccountAmazonCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/auth/amazon/attach"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AttachToAccountAmazon(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AttachToAccountAmazonCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the DetachFromAccountAmazonCommand command.
func (cmd *DetachFromAccountAmazonCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/auth/amazon/detach"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DetachFromAccountAmazon(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DetachFromAccountAmazonCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the LoginAmazonCommand command.
func (cmd *LoginAmazonCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/auth/amazon/login"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp75 *uuid.UUID
	if cmd.Token != "" {
		var err error
		tmp75, err = uuidVal(cmd.Token)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *uuid.UUID value", "flag", "--token", "err", err)
			return err
		}
	}
	resp, err := c.LoginAmazon(ctx, path, tmp75)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *LoginAmazonCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var token string
	cc.Flags().StringVar(&cmd.Token, "token", token, `A merge token for merging into an account`)
}

// Run makes the HTTP request corresponding to the ReceiveAmazonCommand command.
func (cmd *ReceiveAmazonCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/auth/amazon/receive"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp76 *uuid.UUID
	if cmd.State != "" {
		var err error
		tmp76, err = uuidVal(cmd.State)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *uuid.UUID value", "flag", "--state", "err", err)
			return err
		}
	}
	if tmp76 == nil {
		goa.LogError(ctx, "required flag is missing", "flag", "--state")
		return fmt.Errorf("required flag state is missing")
	}
	resp, err := c.ReceiveAmazon(ctx, path, cmd.Code, *tmp76)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ReceiveAmazonCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var code string
	cc.Flags().StringVar(&cmd.Code, "code", code, ``)
	var state string
	cc.Flags().StringVar(&cmd.State, "state", state, ``)
}

// Run makes the HTTP request corresponding to the RegisterAmazonCommand command.
func (cmd *RegisterAmazonCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/auth/amazon/register"
	}
	var payload client.AmazonRegisterParams
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.RegisterAmazon(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *RegisterAmazonCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the RegisterURLAmazonCommand command.
func (cmd *RegisterURLAmazonCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/auth/amazon/register-start"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.RegisterURLAmazon(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *RegisterURLAmazonCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the AddPostBookmarkCommand command.
func (cmd *AddPostBookmarkCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/bookmark/post"
	}
	var payload client.BookmarkParams
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AddPostBookmark(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AddPostBookmarkCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the AddVideoBookmarkCommand command.
func (cmd *AddVideoBookmarkCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/bookmark/video"
	}
	var payload client.BookmarkParams
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AddVideoBookmark(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AddVideoBookmarkCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the GetBookmarksBookmarkCommand command.
func (cmd *GetBookmarksBookmarkCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/bookmark"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetBookmarksBookmark(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetBookmarksBookmarkCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the GetPostBookmarksBookmarkCommand command.
func (cmd *GetPostBookmarksBookmarkCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/bookmark/post"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetPostBookmarksBookmark(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetPostBookmarksBookmarkCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the GetVideoBookmarksBookmarkCommand command.
func (cmd *GetVideoBookmarksBookmarkCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/bookmark/video"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetVideoBookmarksBookmark(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetVideoBookmarksBookmarkCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the RemoveFromBookmarkBookmarkCommand command.
func (cmd *RemoveFromBookmarkBookmarkCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/bookmark"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.RemoveFromBookmarkBookmark(ctx, path, stringFlagVal("id", cmd.ID))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *RemoveFromBookmarkBookmarkCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `ID of the resource to be deleted`)
}

// Run makes the HTTP request corresponding to the AttachToAccountFacebookCommand command.
func (cmd *AttachToAccountFacebookCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/auth/facebook/attach"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AttachToAccountFacebook(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AttachToAccountFacebookCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the DetachFromAccountFacebookCommand command.
func (cmd *DetachFromAccountFacebookCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/auth/facebook/detach"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DetachFromAccountFacebook(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DetachFromAccountFacebookCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the LoginFacebookCommand command.
func (cmd *LoginFacebookCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/auth/facebook/login"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp77 *uuid.UUID
	if cmd.Token != "" {
		var err error
		tmp77, err = uuidVal(cmd.Token)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *uuid.UUID value", "flag", "--token", "err", err)
			return err
		}
	}
	resp, err := c.LoginFacebook(ctx, path, tmp77)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *LoginFacebookCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var token string
	cc.Flags().StringVar(&cmd.Token, "token", token, `A merge token for merging into an account`)
}

// Run makes the HTTP request corresponding to the ReceiveFacebookCommand command.
func (cmd *ReceiveFacebookCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/auth/facebook/receive"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp78 *uuid.UUID
	if cmd.State != "" {
		var err error
		tmp78, err = uuidVal(cmd.State)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *uuid.UUID value", "flag", "--state", "err", err)
			return err
		}
	}
	if tmp78 == nil {
		goa.LogError(ctx, "required flag is missing", "flag", "--state")
		return fmt.Errorf("required flag state is missing")
	}
	resp, err := c.ReceiveFacebook(ctx, path, cmd.Code, *tmp78)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ReceiveFacebookCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var code string
	cc.Flags().StringVar(&cmd.Code, "code", code, ``)
	var state string
	cc.Flags().StringVar(&cmd.State, "state", state, ``)
}

// Run makes the HTTP request corresponding to the RegisterFacebookCommand command.
func (cmd *RegisterFacebookCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/auth/facebook/register"
	}
	var payload client.FacebookRegisterParams
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.RegisterFacebook(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *RegisterFacebookCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the RegisterURLFacebookCommand command.
func (cmd *RegisterURLFacebookCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/auth/facebook/register-start"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.RegisterURLFacebook(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *RegisterURLFacebookCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the AttachToAccountGoogleCommand command.
func (cmd *AttachToAccountGoogleCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/auth/google/attach"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AttachToAccountGoogle(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AttachToAccountGoogleCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the DetachFromAccountGoogleCommand command.
func (cmd *DetachFromAccountGoogleCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/auth/google/detach"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DetachFromAccountGoogle(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DetachFromAccountGoogleCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the LoginGoogleCommand command.
func (cmd *LoginGoogleCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/auth/google/login"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp79 *uuid.UUID
	if cmd.Token != "" {
		var err error
		tmp79, err = uuidVal(cmd.Token)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *uuid.UUID value", "flag", "--token", "err", err)
			return err
		}
	}
	resp, err := c.LoginGoogle(ctx, path, tmp79)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *LoginGoogleCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var token string
	cc.Flags().StringVar(&cmd.Token, "token", token, `A merge token for merging into an account`)
}

// Run makes the HTTP request corresponding to the ReceiveGoogleCommand command.
func (cmd *ReceiveGoogleCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/auth/google/receive"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp80 *uuid.UUID
	if cmd.State != "" {
		var err error
		tmp80, err = uuidVal(cmd.State)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *uuid.UUID value", "flag", "--state", "err", err)
			return err
		}
	}
	if tmp80 == nil {
		goa.LogError(ctx, "required flag is missing", "flag", "--state")
		return fmt.Errorf("required flag state is missing")
	}
	resp, err := c.ReceiveGoogle(ctx, path, cmd.Code, *tmp80)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ReceiveGoogleCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var code string
	cc.Flags().StringVar(&cmd.Code, "code", code, ``)
	var state string
	cc.Flags().StringVar(&cmd.State, "state", state, ``)
}

// Run makes the HTTP request corresponding to the RegisterGoogleCommand command.
func (cmd *RegisterGoogleCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/auth/google/register"
	}
	var payload client.GoogleRegisterParams
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.RegisterGoogle(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *RegisterGoogleCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the RegisterURLGoogleCommand command.
func (cmd *RegisterURLGoogleCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/auth/google/register-start"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.RegisterURLGoogle(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *RegisterURLGoogleCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the AttachToAccountLinkedinCommand command.
func (cmd *AttachToAccountLinkedinCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/auth/linkedin/attach"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AttachToAccountLinkedin(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AttachToAccountLinkedinCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the DetachFromAccountLinkedinCommand command.
func (cmd *DetachFromAccountLinkedinCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/auth/linkedin/detach"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DetachFromAccountLinkedin(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DetachFromAccountLinkedinCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the LoginLinkedinCommand command.
func (cmd *LoginLinkedinCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/auth/linkedin/login"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp81 *uuid.UUID
	if cmd.Token != "" {
		var err error
		tmp81, err = uuidVal(cmd.Token)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *uuid.UUID value", "flag", "--token", "err", err)
			return err
		}
	}
	resp, err := c.LoginLinkedin(ctx, path, tmp81)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *LoginLinkedinCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var token string
	cc.Flags().StringVar(&cmd.Token, "token", token, `A merge token for merging into an account`)
}

// Run makes the HTTP request corresponding to the ReceiveLinkedinCommand command.
func (cmd *ReceiveLinkedinCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/auth/linkedin/receive"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp82 *uuid.UUID
	if cmd.State != "" {
		var err error
		tmp82, err = uuidVal(cmd.State)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *uuid.UUID value", "flag", "--state", "err", err)
			return err
		}
	}
	if tmp82 == nil {
		goa.LogError(ctx, "required flag is missing", "flag", "--state")
		return fmt.Errorf("required flag state is missing")
	}
	resp, err := c.ReceiveLinkedin(ctx, path, cmd.Code, *tmp82)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ReceiveLinkedinCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var code string
	cc.Flags().StringVar(&cmd.Code, "code", code, ``)
	var state string
	cc.Flags().StringVar(&cmd.State, "state", state, ``)
}

// Run makes the HTTP request corresponding to the RegisterLinkedinCommand command.
func (cmd *RegisterLinkedinCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/auth/linkedin/register"
	}
	var payload client.LinkedinRegisterParams
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.RegisterLinkedin(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *RegisterLinkedinCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the RegisterURLLinkedinCommand command.
func (cmd *RegisterURLLinkedinCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/auth/linkedin/register-start"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.RegisterURLLinkedin(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *RegisterURLLinkedinCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the AttachToAccountMicrosoftCommand command.
func (cmd *AttachToAccountMicrosoftCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/auth/microsoft/attach"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AttachToAccountMicrosoft(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AttachToAccountMicrosoftCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the DetachFromAccountMicrosoftCommand command.
func (cmd *DetachFromAccountMicrosoftCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/auth/microsoft/detach"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DetachFromAccountMicrosoft(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DetachFromAccountMicrosoftCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the LoginMicrosoftCommand command.
func (cmd *LoginMicrosoftCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/auth/microsoft/login"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp83 *uuid.UUID
	if cmd.Token != "" {
		var err error
		tmp83, err = uuidVal(cmd.Token)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *uuid.UUID value", "flag", "--token", "err", err)
			return err
		}
	}
	resp, err := c.LoginMicrosoft(ctx, path, tmp83)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *LoginMicrosoftCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var token string
	cc.Flags().StringVar(&cmd.Token, "token", token, `A merge token for merging into an account`)
}

// Run makes the HTTP request corresponding to the ReceiveMicrosoftCommand command.
func (cmd *ReceiveMicrosoftCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/auth/microsoft/receive"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp84 *uuid.UUID
	if cmd.State != "" {
		var err error
		tmp84, err = uuidVal(cmd.State)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *uuid.UUID value", "flag", "--state", "err", err)
			return err
		}
	}
	if tmp84 == nil {
		goa.LogError(ctx, "required flag is missing", "flag", "--state")
		return fmt.Errorf("required flag state is missing")
	}
	resp, err := c.ReceiveMicrosoft(ctx, path, cmd.Code, *tmp84)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ReceiveMicrosoftCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var code string
	cc.Flags().StringVar(&cmd.Code, "code", code, ``)
	var state string
	cc.Flags().StringVar(&cmd.State, "state", state, ``)
}

// Run makes the HTTP request corresponding to the RegisterMicrosoftCommand command.
func (cmd *RegisterMicrosoftCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/auth/microsoft/register"
	}
	var payload client.MicrosoftRegisterParams
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.RegisterMicrosoft(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *RegisterMicrosoftCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the RegisterURLMicrosoftCommand command.
func (cmd *RegisterURLMicrosoftCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/auth/microsoft/register-start"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.RegisterURLMicrosoft(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *RegisterURLMicrosoftCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the AddSubscriberNewsletterCommand command.
func (cmd *AddSubscriberNewsletterCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/newsletter"
	}
	var payload client.NewsletterParam
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AddSubscriberNewsletter(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AddSubscriberNewsletterCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the GetSubscriberByEmailNewsletterCommand command.
func (cmd *GetSubscriberByEmailNewsletterCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/newsletter"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetSubscriberByEmailNewsletter(ctx, path, stringFlagVal("email", cmd.Email))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetSubscriberByEmailNewsletterCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var email string
	cc.Flags().StringVar(&cmd.Email, "email", email, ``)
}

// Run makes the HTTP request corresponding to the GetSubscribersNewsletterCommand command.
func (cmd *GetSubscribersNewsletterCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/newsletter/all"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetSubscribersNewsletter(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetSubscribersNewsletterCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the RemoveSubscriberNewsletterCommand command.
func (cmd *RemoveSubscriberNewsletterCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/newsletter"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.RemoveSubscriberNewsletter(ctx, path, stringFlagVal("email", cmd.Email))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *RemoveSubscriberNewsletterCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var email string
	cc.Flags().StringVar(&cmd.Email, "email", email, ``)
}

// Run makes the HTTP request corresponding to the UpdateSubscriberNewsletterCommand command.
func (cmd *UpdateSubscriberNewsletterCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/newsletter"
	}
	var payload client.NewsletterParam
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateSubscriberNewsletter(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateSubscriberNewsletterCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the ChangePasswordPasswordAuthCommand command.
func (cmd *ChangePasswordPasswordAuthCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/auth/change-password"
	}
	var payload client.ChangePasswordParams
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ChangePasswordPasswordAuth(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ChangePasswordPasswordAuthCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the ConfirmResetPasswordAuthCommand command.
func (cmd *ConfirmResetPasswordAuthCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/auth/finalize-reset"
	}
	var payload client.ResetPasswordParams
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ConfirmResetPasswordAuth(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ConfirmResetPasswordAuthCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the LoginPasswordAuthCommand command.
func (cmd *LoginPasswordAuthCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/auth/login"
	}
	var payload client.LoginParams
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp85 *uuid.UUID
	if cmd.Token != "" {
		var err error
		tmp85, err = uuidVal(cmd.Token)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *uuid.UUID value", "flag", "--token", "err", err)
			return err
		}
	}
	resp, err := c.LoginPasswordAuth(ctx, path, &payload, tmp85, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *LoginPasswordAuthCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var token string
	cc.Flags().StringVar(&cmd.Token, "token", token, `A merge token for merging into an account`)
}

// Run makes the HTTP request corresponding to the RegisterPasswordAuthCommand command.
func (cmd *RegisterPasswordAuthCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/auth/register"
	}
	var payload client.RegisterParams
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.RegisterPasswordAuth(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *RegisterPasswordAuthCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the RemovePasswordAuthCommand command.
func (cmd *RemovePasswordAuthCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/auth/remove-password"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.RemovePasswordAuth(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *RemovePasswordAuthCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the ResetPasswordAuthCommand command.
func (cmd *ResetPasswordAuthCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/auth/reset-password"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ResetPasswordAuth(ctx, path, cmd.Email, cmd.RedirectURL)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ResetPasswordAuthCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var email string
	cc.Flags().StringVar(&cmd.Email, "email", email, `Email of the account to send a password reset`)
	var redirectURL string
	cc.Flags().StringVar(&cmd.RedirectURL, "redirect-url", redirectURL, `URL to redirect to from the user's email link`)
}

// Run makes the HTTP request corresponding to the CleanLoginTokenSessionCommand command.
func (cmd *CleanLoginTokenSessionCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/auth/clean/token/login"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.CleanLoginTokenSession(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CleanLoginTokenSessionCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the CleanMergeTokenSessionCommand command.
func (cmd *CleanMergeTokenSessionCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/auth/clean/token/merge"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.CleanMergeTokenSession(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CleanMergeTokenSessionCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the CleanSessionsSessionCommand command.
func (cmd *CleanSessionsSessionCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/auth/clean/sessions"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.CleanSessionsSession(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CleanSessionsSessionCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the GetSessionsSessionCommand command.
func (cmd *GetSessionsSessionCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/auth/sessions"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetSessionsSession(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetSessionsSessionCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the LogoutSessionCommand command.
func (cmd *LogoutSessionCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/auth/logout"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.LogoutSession(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *LogoutSessionCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the LogoutOtherSessionCommand command.
func (cmd *LogoutOtherSessionCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/auth/logout/all"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.LogoutOtherSession(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *LogoutOtherSessionCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the LogoutSpecificSessionCommand command.
func (cmd *LogoutSpecificSessionCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/v1/user/auth/logout/%v-id", url.QueryEscape(cmd.Session))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.LogoutSpecificSession(ctx, path, cmd.SessionID)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *LogoutSpecificSessionCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var session string
	cc.Flags().StringVar(&cmd.Session, "session", session, ``)
	var sessionID string
	cc.Flags().StringVar(&cmd.SessionID, "session-id", sessionID, ``)
}

// Run makes the HTTP request corresponding to the RedeemTokenSessionCommand command.
func (cmd *RedeemTokenSessionCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/auth/token"
	}
	var payload client.RedeemTokenSessionPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.RedeemTokenSession(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *RedeemTokenSessionCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the RefreshSessionCommand command.
func (cmd *RefreshSessionCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/auth/session"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.RefreshSession(ctx, path, cmd.XSession)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *RefreshSessionCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.XSession, "X-Session", "", ``)
}

// Run makes the HTTP request corresponding to the AttachToAccountTwitterCommand command.
func (cmd *AttachToAccountTwitterCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/auth/twitter/attach"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AttachToAccountTwitter(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AttachToAccountTwitterCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the DetachFromAccountTwitterCommand command.
func (cmd *DetachFromAccountTwitterCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/auth/twitter/detach"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DetachFromAccountTwitter(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DetachFromAccountTwitterCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the LoginTwitterCommand command.
func (cmd *LoginTwitterCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/auth/twitter/login"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp86 *uuid.UUID
	if cmd.Token != "" {
		var err error
		tmp86, err = uuidVal(cmd.Token)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *uuid.UUID value", "flag", "--token", "err", err)
			return err
		}
	}
	resp, err := c.LoginTwitter(ctx, path, tmp86)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *LoginTwitterCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var token string
	cc.Flags().StringVar(&cmd.Token, "token", token, `A merge token for merging into an account`)
}

// Run makes the HTTP request corresponding to the ReceiveTwitterCommand command.
func (cmd *ReceiveTwitterCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/auth/twitter/receive"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ReceiveTwitter(ctx, path, cmd.OauthToken, cmd.OauthVerifier, cmd.State)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ReceiveTwitterCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var oauthToken string
	cc.Flags().StringVar(&cmd.OauthToken, "oauth_token", oauthToken, ``)
	var oauthVerifier string
	cc.Flags().StringVar(&cmd.OauthVerifier, "oauth_verifier", oauthVerifier, ``)
	var state string
	cc.Flags().StringVar(&cmd.State, "state", state, ``)
}

// Run makes the HTTP request corresponding to the RegisterTwitterCommand command.
func (cmd *RegisterTwitterCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/auth/twitter/register"
	}
	var payload client.TwitterRegisterParams
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.RegisterTwitter(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *RegisterTwitterCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the RegisterURLTwitterCommand command.
func (cmd *RegisterURLTwitterCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/auth/twitter/register-start"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.RegisterURLTwitter(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *RegisterURLTwitterCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the AddPluginUserCommand command.
func (cmd *AddPluginUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/user/plugins"
	}
	var payload client.UserPlugin
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AddPluginUser(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AddPluginUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the DeactivateUserCommand command.
func (cmd *DeactivateUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/user"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp87 *bool
	if cmd.Admin != "" {
		var err error
		tmp87, err = boolVal(cmd.Admin)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *bool value", "flag", "--admin", "err", err)
			return err
		}
	}
	resp, err := c.DeactivateUser(ctx, path, tmp87, stringFlagVal("id", cmd.ID))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeactivateUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var admin string
	cc.Flags().StringVar(&cmd.Admin, "admin", admin, `whether admin is requesting this deactivation`)
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `id of the user to be deactivated when admin is deactivating a user`)
}

// Run makes the HTTP request corresponding to the GetAllUsersUserCommand command.
func (cmd *GetAllUsersUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/user/all"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetAllUsersUser(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetAllUsersUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the GetByEmailUserCommand command.
func (cmd *GetByEmailUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/user/email"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetByEmailUser(ctx, path, cmd.Email)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetByEmailUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var email string
	cc.Flags().StringVar(&cmd.Email, "email", email, `The email of the requested user.`)
}

// Run makes the HTTP request corresponding to the GetManyUserCommand command.
func (cmd *GetManyUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/user/multi"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetManyUser(ctx, path, cmd.ID)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetManyUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id []string
	cc.Flags().StringSliceVar(&cmd.ID, "id", id, `Unique unchanging user ID`)
}

// Run makes the HTTP request corresponding to the GetAuthsUserCommand command.
func (cmd *GetAuthsUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/user/authstat"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetAuthsUser(ctx, path, stringFlagVal("userID", cmd.UserID))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetAuthsUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var userID string
	cc.Flags().StringVar(&cmd.UserID, "userID", userID, `The ID of the requested user. If this is not provide, get currently logged in user`)
}

// Run makes the HTTP request corresponding to the ResendVerifyEmailUserCommand command.
func (cmd *ResendVerifyEmailUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/user/resend-verify"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ResendVerifyEmailUser(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ResendVerifyEmailUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the RetrieveUserCommand command.
func (cmd *RetrieveUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/user"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.RetrieveUser(ctx, path, stringFlagVal("user-id", cmd.UserID))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *RetrieveUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var userID string
	cc.Flags().StringVar(&cmd.UserID, "user-id", userID, `The ID of the requested user. If this is not provided, get currently logged in user`)
}

// Run makes the HTTP request corresponding to the UpdateUserCommand command.
func (cmd *UpdateUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/user"
	}
	var payload client.UserParams
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateUser(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the UpdateAdminUserCommand command.
func (cmd *UpdateAdminUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/user/update-user"
	}
	var payload client.UserParamsAdmin
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateAdminUser(ctx, path, &payload, stringFlagVal("uid", cmd.UID), cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateAdminUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var uid string
	cc.Flags().StringVar(&cmd.UID, "uid", uid, `user id to be modified`)
}

// Run makes the HTTP request corresponding to the UpdatePluginPermissionsUserCommand command.
func (cmd *UpdatePluginPermissionsUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/user/user/plugins"
	}
	var payload client.UserPlugin
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdatePluginPermissionsUser(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdatePluginPermissionsUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the ValidateEmailUserCommand command.
func (cmd *ValidateEmailUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/verifyemail/%v", url.QueryEscape(cmd.ValidateID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ValidateEmailUser(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ValidateEmailUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var validateID string
	cc.Flags().StringVar(&cmd.ValidateID, "validateID", validateID, `The ID of the validation to be confirmed`)
}
